{"version":3,"sources":["devEnv.ts","services/jiraRestApiService.ts","hooks/storeHooks.ts","store/slices/sliceNames.ts","store/slices/mainMenuSlice.ts","services/storage/index.ts","services/storage/LocalStorage.ts","services/storage/dao/settingsDao.ts","services/index.ts","services/commonLogService.ts","store/thunks/settingsThunks.ts","store/slices/settingsSlice.ts","services/storage/dao/workLogDao.ts","store/thunks/workLogThunks.ts","store/slices/workLogSlice.ts","store/actions.ts","Components/MainMenu/Header.tsx","Components/MainMenu/MenuDrawer.tsx","Components/BasicComponents/JiraIssueSearch.tsx","Components/BasicComponents/JiraTimeInput.tsx","Components/BasicComponents/HorizontalView.tsx","Components/BasicComponents/CommentSuggestions.tsx","Components/BasicComponents/JiraUserSearch.tsx","Components/WorkLog/EditNotes.tsx","Components/WorkLog/EditWorkLog.tsx","Components/WorkLog/AddWorkLogButton.tsx","Components/WorkLog/DayWiseWorkLog/Header.tsx","Components/BasicComponents/FilterData.tsx","Components/BasicComponents/EnhancedTable.tsx","Components/BasicComponents/JiraTimeView.tsx","hooks/tickHook.ts","Components/WorkLog/PublishWorkLogs.tsx","Components/WorkLog/DayWiseWorkLog/PendingWorkLogList.tsx","Components/WorkLog/DayWiseWorkLog/SubmittedWorkLogList.tsx","Components/WorkLog/DayWiseWorkLog/TotalWorkLogTimeCount.tsx","Components/WorkLog/DayWiseWorkLog/index.tsx","Components/WorkLog/WeeklyWorklogs/SummaryMenu.tsx","Components/WorkLog/WeeklyWorklogs/WorklogSummaryRow.tsx","Components/WorkLog/WeeklyWorklogs/index.tsx","Components/WorkLog/index.tsx","Components/Settings/index.tsx","Components/Reports/ScrumGenerator.tsx","Components/Notes/NoteList.tsx","services/storage/backupService.ts","Components/Backup/index.tsx","Components/MainMenu/MainMenuContent.tsx","Components/MainMenu/index.tsx","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx","utils/jiraUtils.ts","services/HttpService.ts","utils/dateUtils.ts"],"names":["devEnds","moment","require","JiraRestApiService","env","JiraDomainUrl","JiraRestVersion","JiraCurrentUser","Environment","getJiraCurrentUser","setJiraCurrentUser","user","getJiraHeaders","extraHeaders","headers","Authorization","Buffer","from","devEnv","JIRA_API_EMAIL","JIRA_API_TOKEN","toString","getJiraDomainUrl","setJiraDomainUrl","url","sanitizedUrl","trim","endsWith","substr","length","setJiraRestVersion","version","getJiraRestUrlPrefix","fetchCurrentUser","a","populate","HttpService","get","json","response","email","getIssueSuggestion","query","getWorkLogsByDate","date","allWorkLogs","beforeDate","subtract","format","dayWiseWorkLogDateFormat","afterDate","add","issues","issuesByKey","Map","forEach","issue","basicIssue","key","id","summaryText","fields","summary","set","startedAfter","toDate","keys","getWorkLogByIssue","workLogs","worklogs","filter","r","started","JiraDateTimeFormat","issueId","issueKey","issueSummaryText","push","getTime","author","emailAddress","comment","convertTextToJiraComment","postWorkLog","workLog","body","timeSpentSeconds","addRemainingSecondsToRound","convertJiraCommentToText","post","getIssueDetails","getAllUsersOfProject","projectKey","data","u","getAllUsersForPicker","users","this","useAppDispatch","useDispatch","useAppSelector","useSelector","mainMenuSlice","createSlice","name","sliceNames","initialState","open","headerTitle","reducers","openDrawer","state","closeDrawer","toggleDrawer","setHeaderTitle","action","payload","mainMenuActions","actions","storage","itemKey","textFormat","responseString","getItem","JSON","parse","value","setItem","stringify","remove","removeItem","window","localStorage","SETTINGS","SettingsDao","exportData","getSettings","settings","importData","saveSettings","jiraDomainUrl","StaticServices","CommonLogService","logError","error","console","log","obj","settingsSliceName","loadSettings","createAsyncThunk","saveJiraDomainUrl","settingsSlice","jiraUsers","setDomainUrl","extraReducers","builder","addCase","fulfilled","settingsActions","PENDING_WORK_LOG","NOTES","WorkLogDao","getAllPendingWorkLogs","getAllNotes","notes","savePendingWorkLog","note","saveNote","pendingWorkLogs","logIds","logId","removePendingWorkLog","noteIds","removeNote","workLogSliceName","addPendingWorkLog","pendingWorkLog","resumed","updatePendingWorkLog","deletePendingWorkLog","loadPendingWorkLogs","resumePendingWorkLog","updatedWorkLog","lodash","clone","pauseWorkLog","find","cloneDeep","Math","ceil","pausePendingWorkLog","getState","uploadPendingWorkLog","uploadedWorkLog","undefined","hasNotes","spentTime","createAt","loadWorkLogsByDate","addNote","Note","updateNote","deleteNote","loadNotes","workLogSlice","dayWiseWorkLogDate","submittedWorkLogs","datesForWhichWorkLogsLoaded","incrementCurrentDate","decrementCurrentDate","setCurrentDate","dateValue","stringValue","reloadSubmittedWorkLogs","has","merge","index","findIndex","splice","uniqWith","b","isEqualWith","dateString","indexOf","workLogActions","mainMenu","useStyles","makeStyles","theme","createStyles","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","display","Header","classes","menuOpen","dispatch","AppBar","position","className","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","MenuDrawer","Drawer","paper","Divider","List","ListItem","button","component","Link","to","ListItemIcon","ListItemText","primary","Backup","getLabelForOption","option","JiraIssueSearch","props","React","useState","setOpen","options","setOptions","initialValue","queryString","setQueryString","loading","setLoading","useEffect","active","then","res","result","Set","sections","section","clear","processJiraSuggestion","catch","Autocomplete","fullWidth","onOpen","onClose","getOptionSelected","getOptionLabel","defaultValue","onChange","e","renderInput","params","TextField","autoFocus","label","target","InputProps","endAdornment","Fragment","CircularProgress","size","JiraTimeInput","convertTimeInSecondToJiraTimeFormat","timeInSeconds","text","seconds","timeString","setTimeString","timeValue","setTimeValue","inputSeconds","setInputSeconds","invalidString","setInvalidString","Grid","container","item","xs","valueInSeconds","convertJiraTimeFormatToSeconds","invalid","type","inputProps","maxLength","Tooltip","title","style","fontSize","cursor","InfoRounded","align","height","flexDirection","disabled","numberValue","Number","parseInt","horizontal","maxWidth","touchAction","paddingBottom","visibility","HorizontalView","children","ref","useRef","current","addEventListener","deltaY","preventDefault","scrollTo","left","scrollLeft","behavior","stopImmediatePropagation","chip","getAssociatedField","levelOfProperties","properties","i","src","currentValue","property","propertyValue","CommentSuggestions","suggestions","setSuggestions","setIssue","getAvatar","suggestion","avatarLink","Avatar","avatarString","avatarParams","avatarLinkParams","onClickChip","commentParams","param","split","join","getComment","newSuggestions","map","Chip","avatar","JiraUserSearch","displayName","accountId","renderOption","ListItemAvatar","avatarUrl","EditNotes","onSave","setType","rating","setRating","forUser","setForUser","details","setDetails","initialOnEditMode","editMode","setEditMode","valueChanged","marginTop","FormControl","required","InputLabel","Select","labelId","MenuItem","Rating","event","newValue","multiline","Button","EditWorkLog","currentDateString","UiDateTimeLocalFormat","currentDate","month","year","calculateStartedDate","setStarted","setTimeSpentSeconds","setComment","errorText","setErrorText","setHasNotes","uuid","setNotes","saveEnabled","setSaveEnabled","isNew","getUpdatedWorkLog","saveWorkLog","start","promise","Dialog","aria-labelledby","DialogTitle","DialogContent","margin","justify","rows","rowsMax","Clear","ErrorSharp","FormControlLabel","control","Checkbox","checked","n","DialogActions","AddWorkLogButton","editWorkLogVisible","setEditWorkLogVisible","ArrowLeft","InputLabelProps","shrink","onKeyDown","ArrowRight","defaultComparator","operator","toLowerCase","Array","includes","String","FilterData","filters","setFilters","textAlign","columns","numeric","addFilterAtFirst","f","FilterRow","nf","_","j","onDelete","marginBottom","c","op","Delete","descendingComparator","orderBy","withStyles","root","icon","TableSortLabel","useHeaderStyles","headCell","fondWeight","EnhancedTableHead","onSelectAllClick","order","numSelected","rowCount","onRequestSort","selectionMode","styles","TableHead","TableRow","TableCell","indeterminate","column","disablePadding","sortDirection","disableSorting","direction","visuallyHidden","useToolbarStyles","paddingLeft","paddingRight","highlight","palette","secondary","main","backgroundColor","lighten","light","dark","flex","EnhancedTableToolbar","selectedRows","clearSortingAndFilter","openFilters","selectionActions","toolTipText","renderIcon","ClearAllRounded","table","minWidth","border","clip","overflow","top","EnhancedTable","selection","sorting","getRowKey","getRowStyle","fixedTopRowKey","defaultSortingOrder","setOrder","setOrderBy","selected","setSelected","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","showFilters","setShowFilters","defaultSorting","handleClick","selectedIndex","selectedRow","filteredRows","newSelected","mode","concat","slice","row","compareResult","comparator","array","stabilizedThis","el","sort","stableSort","descCompare","getComparator","theRow","emptyRows","min","Paper","elevation","TableContainer","Table","TableBody","rowKey","isItemSelected","hover","by","role","aria-checked","tabIndex","renderColumn","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","Switch","JiraTimeView","timeSpendInSeconds","roundSeconds","tick","Date","setTick","interval","setInterval","clearInterval","useTick","Boolean","totalTimeSpent","jiraTimeFormat","PublishWorkLogs","submitEnabled","setSubmitEnabled","totalTimeInSeconds","reduce","t","TimeFormatForView","promises","Promise","all","err","publish","PendingWorkLogList","useTheme","currentSelectedWorkLog","setCurrentSelectedWorkLog","selectedWorkLogsToUpload","setSelectedWorkLogsToUpload","pendingWorkLogsOfCurrentDate","setPendingWorkLogsOfCurrentDate","areSameDate","resumedWorkLog","isResumed","background","Publish","PlayArrow","resolve","resumeTask","Pause","Edit","SubmittedWorkLog","resume","TotalWorkLogTimeCount","totalSubmitted","totalPending","total","noBefore","DayWiseWorkLog","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMoreRounded","aria-controls","AccordionDetails","SummaryMenu","fromDate","onChangeDate","anchorEl","setAnchorEl","currentLogDate","allDates","getAllDatesWithinRange","updateWeekRange","dateOfTheWeek","fd","td","weekday","currentTarget","MoreVert","keepMounted","Refresh","useStyle","activeDate","WorklogSummaryRow","currentActiveDate","isDateWithinRange","isBetween","roundTimeInSeconds","rowStyle","cellStyle","scope","head","common","white","WeeklyWorklogs","setFromDate","setToDate","setWeekly","subHeader","Card","CardHeader","subheader","CardContent","fontWeight","WorkLog","percentage","vertical","secondaryInitialSize","jiraUrl","setJiraUrl","location","useLocation","errorConnect","Alert","severity","processWorkLogForScum","probableMyIssue","isCommon","isReview","isImplementation","isComplete","isAnalysis","isDiscussion","ScrumGenerator","previousDay","worked","setWorked","plan","setPlan","comments","navigator","clipboard","writeText","FileCopy","NoteList","s","def","nameA","nameB","workLogDao","settingDao","StorageBackupService","fileRef","downloadPrompt","element","document","createElement","file","Blob","href","URL","createObjectURL","download","appendChild","click","importClicked","exportDatabase","accept","files","reader","FileReader","onload","importDatabase","reload","readAsText","importFile","MainMenuContent","path","settingsDao","req","drawerWidth","content","flexGrow","minHeight","MainMenu","history","useHistory","pathname","CssBaseline","Backdrop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","StrictMode","getElementById","allowedTimeUnit","jiraComment","convertJiraNodeToText","node","child","timeInSecond","minutes","floor","hours","strList","toLocaleLowerCase","match","unit","unitInSecond","parseFloat","proxy","method","bodyData","expectJson","fetch","put","date1","date2","isSameOrBefore"],"mappings":"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","file":"static/js/main.6c561ba2.chunk.js","sourcesContent":["const devEnds = {\r\n    \"JIRA_API_EMAIL\": \"shakil.ruet.uva@gmail.com\",\r\n    \"JIRA_API_TOKEN\": \"KZwKlSX3diPhLcbPPhsc12BF\"\r\n}\r\n\r\nexport default devEnds;","import { JiraIssueBasicInt, JiraIssuePickerResponseInt, JiraIssueWorkLogResponseInt, JiraUserInt, JiraUserPickerInt, JiraWorkLogInt, PendingWorkLogInt } from '../types';\r\nimport HttpService from './HttpService';\r\nimport devEnv from \"../devEnv\";\r\nimport { addRemainingSecondsToRound, convertJiraCommentToText, convertTextToJiraComment } from '../utils/jiraUtils';\r\nimport { dayWiseWorkLogDateFormat, JiraDateTimeFormat } from '../utils/dateUtils';\r\nconst moment = require('moment')\r\nexport default class JiraRestApiService {\r\n    private JiraDomainUrl: string;\r\n    private JiraRestVersion: number;\r\n    private JiraCurrentUser: string;\r\n    private Environment: \"development\" | \"production\";\r\n    constructor(env?: \"development\" | \"production\") {\r\n        this.JiraDomainUrl = \"\";\r\n        this.Environment = (process.env.NODE_ENV === \"development\") ? \"development\" : \"production\"\r\n        this.JiraRestVersion = 2\r\n        this.JiraCurrentUser = \"\"\r\n    }\r\n\r\n    getJiraCurrentUser = () => {\r\n        return this.JiraCurrentUser\r\n    }\r\n\r\n    setJiraCurrentUser = (user: string) => {\r\n        this.JiraCurrentUser = user\r\n    }\r\n\r\n    getJiraHeaders = (extraHeaders?: any) => {\r\n        let headers: any = {\r\n            'X-Atlassian-Token': 'nocheck',\r\n            'Accept': 'application/json',\r\n            ...extraHeaders\r\n        };\r\n        if (this.Environment === \"development\") {\r\n            headers.Authorization = `Basic ${Buffer.from(\r\n                `${devEnv.JIRA_API_EMAIL}:${devEnv.JIRA_API_TOKEN}`\r\n            ).toString('base64')}`\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    getJiraDomainUrl = () => this.JiraDomainUrl\r\n\r\n    setJiraDomainUrl = (url: string) => {\r\n        let sanitizedUrl = url.trim()\r\n        while (sanitizedUrl.endsWith(\"/\")) {\r\n            sanitizedUrl = sanitizedUrl.substr(0, url.length - 1).trim();\r\n        }\r\n        this.JiraDomainUrl = sanitizedUrl;\r\n    }\r\n\r\n    setJiraRestVersion = (version: number) => {\r\n        this.JiraRestVersion = version;\r\n    }\r\n\r\n    getJiraRestUrlPrefix = () => {\r\n        return `${this.JiraDomainUrl}/rest/api/${this.JiraRestVersion}`;\r\n    }\r\n\r\n    fetchCurrentUser = async (populate: boolean = false) => {\r\n        let url = this.getJiraDomainUrl() + \"/rest/gadget/1.0/currentUser\";\r\n        const json = await HttpService.get(url, this.getJiraHeaders(), true);\r\n        const response = json as {username: string, fullName: string, email: string}\r\n        if(populate) {\r\n            this.JiraCurrentUser = response.email\r\n        }\r\n        return response\r\n    }\r\n\r\n    getIssueSuggestion = async (query?: string): Promise<JiraIssuePickerResponseInt> => {\r\n        let url = this.getJiraRestUrlPrefix() + \"/issue/picker\";\r\n        if (query && query.trim()) {\r\n            url += `?query=${query.trim()}&currentJQL`\r\n        }\r\n        const json = await HttpService.get(url, this.getJiraHeaders(), true);\r\n        return json as JiraIssuePickerResponseInt;\r\n    }\r\n\r\n    getWorkLogsByDate = async (date: Date): Promise<JiraWorkLogInt[]> => {\r\n        let allWorkLogs: JiraWorkLogInt[] = []\r\n        let url = this.getJiraRestUrlPrefix() + \"/search\";\r\n        const beforeDate = moment(date).subtract(2, \"day\").format(dayWiseWorkLogDateFormat)\r\n        const afterDate = moment(date).add(1, \"day\").format(dayWiseWorkLogDateFormat)\r\n        url += `?jql=worklogDate%20>%20\"${beforeDate}\"%20and%20worklogDate%20<%20\"${afterDate}\"%20and%20worklogAuthor%20%3D%20currentUser()&fields=summary`\r\n        const json = await HttpService.get(url, this.getJiraHeaders(), true);\r\n        const issues = json.issues as { id: string, key: string, fields: { summary: string } }[];\r\n        const issuesByKey = new Map<string, JiraIssueBasicInt>()\r\n        issues.forEach(issue => {\r\n            const basicIssue: JiraIssueBasicInt = {\r\n                key: issue.key,\r\n                id: issue.id,\r\n                summaryText: issue.fields.summary\r\n            }\r\n            issuesByKey.set(issue.key, basicIssue)\r\n        })\r\n\r\n        const startedAfter = moment(moment(date).format(dayWiseWorkLogDateFormat), dayWiseWorkLogDateFormat).toDate()\r\n        for (const key of issuesByKey.keys()) {\r\n            const issue = issuesByKey.get(key)\r\n            if (issue) {\r\n                const response = await this.getWorkLogByIssue(key, startedAfter)\r\n                const workLogs = response.worklogs.filter(r => moment(r.started, JiraDateTimeFormat).format(dayWiseWorkLogDateFormat) === moment(date).format(dayWiseWorkLogDateFormat))\r\n                workLogs.forEach(r => {\r\n                    r.issueId = issue.id\r\n                    r.issueKey = issue.key\r\n                    r.issueSummaryText = issue.summaryText\r\n                });\r\n                allWorkLogs.push(...workLogs)\r\n            }\r\n        }\r\n        return allWorkLogs;\r\n    }\r\n\r\n    getWorkLogByIssue = async (issueKey: string, startedAfter: Date): Promise<JiraIssueWorkLogResponseInt> => {\r\n        let url = this.getJiraRestUrlPrefix() + `/issue/${issueKey}/worklog`;\r\n        url += `?startedAfter=${startedAfter.getTime()}`\r\n        const json = await HttpService.get(url, this.getJiraHeaders(), true);\r\n        json.worklogs = json.worklogs\r\n            .filter((r: any) => r.author.emailAddress === this.JiraCurrentUser);\r\n        json.worklogs.forEach((r: any) => {\r\n            if (!r.comment) {\r\n                r.comment = \"\";\r\n            }\r\n            if (this.JiraRestVersion < 3 && typeof r.comment === \"string\") {\r\n                r.comment = convertTextToJiraComment(r.comment)\r\n            }\r\n        })\r\n        return json as JiraIssueWorkLogResponseInt;\r\n    }\r\n\r\n    postWorkLog = async (workLog: PendingWorkLogInt): Promise<JiraWorkLogInt> => {\r\n        let url = this.getJiraRestUrlPrefix() + `/issue/${workLog.issueKey}/worklog`;\r\n        let body = {\r\n            timeSpentSeconds: addRemainingSecondsToRound(workLog.timeSpentSeconds),\r\n            comment: this.JiraRestVersion == 3 ? workLog.comment : convertJiraCommentToText(workLog.comment),\r\n            started: workLog.started\r\n        }\r\n        const json = await HttpService.post(url, this.getJiraHeaders({\r\n            'Content-Type': 'application/json'\r\n        }), body, true);\r\n\r\n        if(typeof json.comment === \"string\") {\r\n            json.comment = convertTextToJiraComment(json.comment)\r\n        }\r\n        const response = json as JiraWorkLogInt;\r\n        \r\n        response.issueKey = workLog.issueKey\r\n        response.issueSummaryText = workLog.issueSummaryText\r\n\r\n        return response\r\n    }\r\n\r\n    getIssueDetails = async (issueKey: string): Promise<any> => {\r\n        let url = this.getJiraRestUrlPrefix() + `/issue/${issueKey}`;\r\n        url += `?fields=summary,assignee,customfield_10901`\r\n        const json = await HttpService.get(url, this.getJiraHeaders(), true);\r\n        return json.fields;\r\n    }\r\n\r\n    getAllUsersOfProject = async (projectKey: string): Promise<any> => {\r\n        let url = this.getJiraRestUrlPrefix() + `/user/assignable/multiProjectSearch`;\r\n        url += `?projectKeys=${projectKey}`\r\n        const json = await HttpService.get(url, this.getJiraHeaders(), true);\r\n        const data = json as JiraUserInt[];\r\n        data.forEach(u => u.projectKey = projectKey)\r\n        return data\r\n    }\r\n\r\n    getAllUsersForPicker = async (query: string): Promise<any> => {\r\n        let url = this.getJiraRestUrlPrefix() + `/user/picker`;\r\n        url += `?query=${query}&showAvatar=true`\r\n        const json = await HttpService.get(url, this.getJiraHeaders(), true);\r\n        const data = json.users as JiraUserPickerInt[];\r\n        return data\r\n    }\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","export default {\r\n    workLogSliceName: \"workLog\",\r\n    mainMenuSliceName: \"mainMenu\",\r\n    settingsSliceName: \"settings\"\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport sliceNames from './sliceNames'\r\nconst mainMenuSlice = createSlice({\r\n  name: sliceNames.mainMenuSliceName,\r\n  initialState: {\r\n    open: false,\r\n    headerTitle: \"Dev Assistant\"\r\n  },\r\n  reducers: {\r\n    openDrawer: (state) => {\r\n      state.open = true\r\n    },\r\n    closeDrawer: (state) => {\r\n      state.open = false\r\n    },\r\n    toggleDrawer: (state) => {\r\n      state.open = !state.open\r\n    },\r\n    setHeaderTitle: (state, action: PayloadAction<string>) => {\r\n        state.headerTitle = action.payload\r\n    }\r\n  },\r\n})\r\n\r\nexport const mainMenuActions = mainMenuSlice.actions\r\n\r\nexport default mainMenuSlice.reducer","import { LocalStorage } from \"./LocalStorage\";\r\n\r\nconst storage = new LocalStorage()\r\n\r\nexport default storage","export class LocalStorage {\r\n    constructor() {\r\n        this.storage = window.localStorage\r\n    }\r\n    storage: Storage\r\n\r\n    get = async <T>(itemKey: string, textFormat: boolean = false): Promise<T|null> => {\r\n        let responseString:any = this.storage.getItem(itemKey)\r\n        if (!textFormat && responseString) {\r\n            return JSON.parse(responseString) as T\r\n        }\r\n        return responseString as T;\r\n    }\r\n\r\n    set = async (itemKey: string, value: any) => {\r\n        this.storage.setItem(itemKey, JSON.stringify(value));\r\n    }\r\n\r\n    remove = async (itemKey: string) => {\r\n        this.storage.removeItem(itemKey)\r\n    }\r\n}","import { PendingWorkLogInt, SettingsInt } from \"../../../types\";\r\nimport BaseDao from './baseDao'\r\nimport storage from \"../index\";\r\n\r\nconst SETTINGS = \"SETTINGS\";\r\n\r\nexport interface SettingsDaoDataInt {\r\n    settings: SettingsInt\r\n}\r\n\r\nexport default class SettingsDao implements BaseDao<SettingsDaoDataInt>{\r\n    exportData = async (): Promise<SettingsDaoDataInt>  => {\r\n        return {\r\n            settings: await SettingsDao.getSettings()\r\n        }\r\n    }\r\n\r\n    importData = async (data: SettingsDaoDataInt) => {\r\n        SettingsDao.saveSettings(data.settings)\r\n    }\r\n\r\n    static getSettings = async (): Promise<SettingsInt> => {\r\n        const response = await storage.get<SettingsInt>(SETTINGS);\r\n        return response ? response: {\r\n            jiraDomainUrl: \"\"\r\n        }\r\n    }\r\n\r\n    static saveSettings = async (settings: SettingsInt) => {\r\n        await storage.set(SETTINGS, settings)\r\n    }\r\n}","import CommonLogService from \"./commonLogService\";\r\nimport JiraRestApiService from \"./jiraRestApiService\";\r\n\r\nexport default class StaticServices {\r\n    static CommonLogService = new CommonLogService()\r\n    static JiraRestApiService = new JiraRestApiService()\r\n}","export default class CommonLogService{\r\n    logError = (error: any) => {\r\n        console.error(error)\r\n    }\r\n\r\n    log = (obj: any) => {\r\n        console.log(obj)\r\n    }\r\n}","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport sliceNames from \"../slices/sliceNames\";\r\nimport SettingsDao from \"../../services/storage/dao/settingsDao\";\r\nimport StaticServices from \"../../services\";\r\n\r\nconst settingsSliceName = sliceNames.settingsSliceName\r\n\r\nexport const loadSettings = createAsyncThunk(\r\n    settingsSliceName + \"/loadSettings\",\r\n    async () => {\r\n        let settings = await SettingsDao.getSettings()\r\n        StaticServices.JiraRestApiService.setJiraDomainUrl(settings.jiraDomainUrl)\r\n        await StaticServices.JiraRestApiService.fetchCurrentUser(true)\r\n        return settings\r\n    }\r\n);\r\n\r\nexport const saveJiraDomainUrl = createAsyncThunk(\r\n    settingsSliceName + \"/saveJiraDomainUrl\",\r\n    async (url: string) => {\r\n        let settings = await SettingsDao.getSettings()\r\n        settings.jiraDomainUrl = url\r\n        await SettingsDao.saveSettings(settings)\r\n        return url\r\n    }\r\n);\r\n\r\nexport const getAllUsersOfProject = createAsyncThunk(\r\n    settingsSliceName + \"/getAllUsersOfProject\",\r\n    async (projectKey: string) => {\r\n        return await StaticServices.JiraRestApiService.getAllUsersOfProject(projectKey)\r\n    }\r\n);","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { JiraUserInt } from '../../types';\r\nimport { getAllUsersOfProject, loadSettings, saveJiraDomainUrl } from '../thunks/settingsThunks';\r\nimport sliceNames from './sliceNames'\r\nconst settingsSlice = createSlice({\r\n  name: sliceNames.settingsSliceName,\r\n  initialState: {\r\n    jiraDomainUrl: \"\",\r\n    jiraUsers: [] as JiraUserInt[]\r\n  },\r\n  reducers: {\r\n    setDomainUrl: (state, action: PayloadAction<string>) => {\r\n      if(state.jiraDomainUrl !== action.payload) {\r\n        state.jiraDomainUrl = action.payload\r\n      }\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(loadSettings.fulfilled, (state, action) => {\r\n      state.jiraDomainUrl = action.payload.jiraDomainUrl\r\n    });\r\n    builder.addCase(saveJiraDomainUrl.fulfilled, (state, action) => {\r\n      state.jiraDomainUrl = action.payload\r\n    });\r\n    builder.addCase(getAllUsersOfProject.fulfilled, (state, action) => {\r\n      state.jiraUsers = action.payload\r\n    });\r\n  }\r\n})\r\n\r\nexport const settingsActions = settingsSlice.actions\r\n\r\nexport default settingsSlice.reducer","import { NoteInt, PendingWorkLogInt } from \"../../../types\";\r\nimport BaseDao from './baseDao'\r\nimport storage from \"../index\";\r\n\r\nconst PENDING_WORK_LOG = \"PENDING_WORK_LOG\";\r\nconst NOTES = \"NOTES\";\r\n\r\nexport interface WorkLogDaoDataInt {\r\n    workLogs: PendingWorkLogInt[],\r\n    notes: NoteInt[]\r\n}\r\n\r\nexport default class WorkLogDao implements BaseDao<WorkLogDaoDataInt>{\r\n    exportData = async (): Promise<WorkLogDaoDataInt>  => {\r\n        return {\r\n            workLogs: await WorkLogDao.getAllPendingWorkLogs(),\r\n            notes: await WorkLogDao.getAllNotes()\r\n        }\r\n    }\r\n\r\n    importData= async (data: WorkLogDaoDataInt): Promise<any> => {\r\n        if(data) {\r\n            if(data.workLogs) {\r\n                for(let workLog of data.workLogs) {\r\n                    await WorkLogDao.savePendingWorkLog(workLog)\r\n                }\r\n            }\r\n            if(data.notes) {\r\n                for(let note of data.notes) {\r\n                    await WorkLogDao.saveNote(note)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static getAllPendingWorkLogs = async () => {\r\n        let pendingWorkLogs: PendingWorkLogInt[] = []\r\n        const logIds = await storage.get<string[]>(PENDING_WORK_LOG);\r\n        if (logIds) {\r\n            for (let logId of logIds) {\r\n                let workLog = await storage.get<PendingWorkLogInt>(logId)\r\n                if (workLog) {\r\n                    pendingWorkLogs.push(workLog)\r\n                }\r\n            }\r\n        }\r\n        return pendingWorkLogs;\r\n    }\r\n\r\n    static savePendingWorkLog = async (workLog: PendingWorkLogInt) => {\r\n        let existingWorkLog = await storage.get<PendingWorkLogInt>(workLog.id)\r\n        if (!existingWorkLog) {\r\n            let logIds = await storage.get<string[]>(PENDING_WORK_LOG);\r\n            if (!logIds) {\r\n                logIds = []\r\n            }\r\n            logIds.push(workLog.id)\r\n            await storage.set(PENDING_WORK_LOG, logIds)\r\n        }\r\n        await storage.set(workLog.id, workLog)\r\n    }\r\n\r\n    static removePendingWorkLog = async (id: string) => {\r\n        let logIds = await storage.get<string[]>(PENDING_WORK_LOG);\r\n        if (logIds) {\r\n            await storage.set(PENDING_WORK_LOG, logIds.filter(r => r != id))\r\n        }\r\n        await storage.remove(id)\r\n    }\r\n\r\n    static getAllNotes = async () => {\r\n        let notes: NoteInt[] = []\r\n        const noteIds = await storage.get<string[]>(NOTES);\r\n        if (noteIds) {\r\n            for (let logId of noteIds) {\r\n                let workLog = await storage.get<NoteInt>(logId)\r\n                if (workLog) {\r\n                    notes.push(workLog)\r\n                }\r\n            }\r\n        }\r\n        return notes;\r\n    }\r\n\r\n    static saveNote = async (note: NoteInt) => {\r\n        let existingNote = await storage.get<NoteInt>(note.id)\r\n        if (!existingNote) {\r\n            let noteIds = await storage.get<string[]>(NOTES);\r\n            if (!noteIds) {\r\n                noteIds = []\r\n            }\r\n            noteIds.push(note.id)\r\n            await storage.set(NOTES, noteIds)\r\n        }\r\n        await storage.set(note.id, note)\r\n    }\r\n\r\n    static removeNote = async (id: string) => {\r\n        let noteIds = await storage.get<string[]>(NOTES);\r\n        if (noteIds) {\r\n            await storage.set(NOTES, noteIds.filter(r => r != id))\r\n        }\r\n        await storage.remove(id)\r\n    }\r\n}","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport WorkLogDao from \"../../services/storage/dao/workLogDao\";\r\nimport { NoteInt, PendingWorkLogInt } from \"../../types\";\r\nimport sliceNames from \"../slices/sliceNames\";\r\nimport lodash from \"lodash\"\r\nimport { dayWiseWorkLogDateFormat, JiraDateTimeFormat } from \"../../utils/dateUtils\";\r\nimport moment from \"moment\";\r\nimport StaticServices from \"../../services\";\r\nimport { RootState } from \"..\";\r\n\r\nconst workLogSliceName = sliceNames.workLogSliceName\r\n\r\nexport const addPendingWorkLog = createAsyncThunk(\r\n    workLogSliceName + \"/addPendingWorkLog\",\r\n    async (pendingWorkLog: PendingWorkLogInt) => {\r\n        if(pendingWorkLog.resumed) {\r\n            \r\n        }\r\n        await WorkLogDao.savePendingWorkLog(pendingWorkLog)\r\n        return pendingWorkLog\r\n    }\r\n);\r\n\r\nexport const updatePendingWorkLog = createAsyncThunk(\r\n    workLogSliceName + \"/updatePendingWorkLog\",\r\n    async (pendingWorkLog: PendingWorkLogInt) => {\r\n        await WorkLogDao.savePendingWorkLog(pendingWorkLog)\r\n        return pendingWorkLog\r\n    }\r\n);\r\n\r\nexport const deletePendingWorkLog = createAsyncThunk(\r\n    workLogSliceName + \"/deletePendingWorkLog\",\r\n    async (id: string) => {\r\n        await WorkLogDao.removePendingWorkLog(id)\r\n        return id\r\n    }\r\n);\r\n\r\nexport const loadPendingWorkLogs = createAsyncThunk(\r\n    workLogSliceName + \"/loadAllPendingWorkLog\",\r\n    async () => {\r\n        let response = await WorkLogDao.getAllPendingWorkLogs()\r\n        return response\r\n    }\r\n);\r\n\r\nexport const resumePendingWorkLog = createAsyncThunk(\r\n    workLogSliceName + \"/resumePendingWorkLog\",\r\n    async (pendingWorkLog: PendingWorkLogInt) => {\r\n        const updatedWorkLog = lodash.clone(pendingWorkLog)\r\n        updatedWorkLog.resumed = moment().format(JiraDateTimeFormat)\r\n        await WorkLogDao.savePendingWorkLog(updatedWorkLog)\r\n        return updatedWorkLog\r\n    }\r\n);\r\n\r\nasync function pauseWorkLog(pendingWorkLog: PendingWorkLogInt| null, state: RootState) {\r\n    let updatedWorkLog: PendingWorkLogInt|null|undefined = pendingWorkLog\r\n    // const state = getState() as RootState\r\n    if(pendingWorkLog == null) {\r\n        updatedWorkLog = state.workLog.pendingWorkLog.find(r => r.resumed)\r\n    }\r\n    updatedWorkLog = lodash.cloneDeep(updatedWorkLog)\r\n    if(updatedWorkLog) {\r\n        updatedWorkLog.timeSpentSeconds += (moment().toDate().getTime() - moment(updatedWorkLog.resumed, JiraDateTimeFormat).toDate().getTime()) / 1000\r\n        updatedWorkLog.timeSpentSeconds = Math.ceil(updatedWorkLog.timeSpentSeconds)\r\n        updatedWorkLog.resumed = \"\"\r\n        await WorkLogDao.savePendingWorkLog(updatedWorkLog)\r\n        console.log(\"updatedWork:\" , updatedWorkLog)\r\n    }\r\n    return updatedWorkLog\r\n}\r\n\r\nexport const pausePendingWorkLog = createAsyncThunk(\r\n    workLogSliceName + \"/pausePendingWorkLog\",\r\n    async (pendingWorkLog: PendingWorkLogInt|null, {getState}) => {\r\n        const updatedWorkLog = await pauseWorkLog(pendingWorkLog, getState() as RootState)\r\n        return updatedWorkLog\r\n    }\r\n);\r\n\r\nexport const uploadPendingWorkLog = createAsyncThunk(\r\n    workLogSliceName + \"/uploadPendingWorkLog\",\r\n    async (pendingWorkLog: PendingWorkLogInt) => {\r\n        try {\r\n            console.log(\"Uploading\")\r\n            const uploadedWorkLog = await StaticServices.JiraRestApiService.postWorkLog(pendingWorkLog)\r\n            await WorkLogDao.removePendingWorkLog(pendingWorkLog.id)\r\n            let notes = undefined\r\n            if (pendingWorkLog.hasNotes && pendingWorkLog.notes) {\r\n                notes = {\r\n                    ...pendingWorkLog.notes,\r\n                    issueKey: pendingWorkLog.issueKey, issueSummaryText: pendingWorkLog.issueSummaryText,\r\n                    spentTime: pendingWorkLog.timeSpentSeconds,\r\n                    createAt: moment(pendingWorkLog.started, JiraDateTimeFormat).toDate().getTime()\r\n                }\r\n                await WorkLogDao.saveNote(notes)\r\n            }\r\n            return {\r\n                uploadedWorkLog,\r\n                pendingWorkLog: {...pendingWorkLog, notes}\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n            throw e\r\n        }\r\n    }\r\n);\r\n\r\nexport const loadWorkLogsByDate = createAsyncThunk(\r\n    workLogSliceName + \"/loadWorkLogsByDate\",\r\n    async (date: Date) => {\r\n        return {\r\n            workLogs: await StaticServices.JiraRestApiService.getWorkLogsByDate(date),\r\n            date: moment(date).format(dayWiseWorkLogDateFormat)\r\n        }\r\n    }\r\n);\r\n\r\nexport const addNote = createAsyncThunk(\r\n    workLogSliceName + \"/addNote\",\r\n    async (Note: NoteInt) => {\r\n        await WorkLogDao.saveNote(Note)\r\n        return Note\r\n    }\r\n);\r\n\r\nexport const updateNote = createAsyncThunk(\r\n    workLogSliceName + \"/updateNote\",\r\n    async (Note: NoteInt) => {\r\n        await WorkLogDao.saveNote(Note)\r\n        return Note\r\n    }\r\n);\r\n\r\nexport const deleteNote = createAsyncThunk(\r\n    workLogSliceName + \"/deleteNote\",\r\n    async (id: string) => {\r\n        await WorkLogDao.removeNote(id)\r\n        return id\r\n    }\r\n);\r\n\r\nexport const loadNotes = createAsyncThunk(\r\n    workLogSliceName + \"/loadAllNote\",\r\n    async () => {\r\n        let response = await WorkLogDao.getAllNotes()\r\n        return response\r\n    }\r\n);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport moment from 'moment'\r\nimport { JiraWorkLogInt, NoteInt, PendingWorkLogInt } from '../../types';\r\nimport lodash from 'lodash';\r\nimport { dayWiseWorkLogDateFormat, JiraDateTimeFormat } from '../../utils/dateUtils';\r\nimport { addNote, addPendingWorkLog, deleteNote, deletePendingWorkLog, loadNotes, loadPendingWorkLogs, loadWorkLogsByDate, pausePendingWorkLog, resumePendingWorkLog, updateNote, updatePendingWorkLog, uploadPendingWorkLog } from '../thunks/workLogThunks';\r\nimport sliceNames from './sliceNames';\r\nconst workLogSlice = createSlice({\r\n  name: sliceNames.workLogSliceName,\r\n  initialState: {\r\n    dayWiseWorkLogDate: moment().format(dayWiseWorkLogDateFormat),\r\n    pendingWorkLog: [] as PendingWorkLogInt[],\r\n    submittedWorkLogs: [] as JiraWorkLogInt[],\r\n    datesForWhichWorkLogsLoaded: [] as string[],\r\n    notes: [] as NoteInt[]\r\n  },\r\n  reducers: {\r\n    incrementCurrentDate: (state) => {\r\n      state.dayWiseWorkLogDate = moment(state.dayWiseWorkLogDate, dayWiseWorkLogDateFormat)\r\n        .add(1, 'day')\r\n        .format(dayWiseWorkLogDateFormat);\r\n    },\r\n    decrementCurrentDate: (state) => {\r\n      state.dayWiseWorkLogDate = moment(state.dayWiseWorkLogDate, dayWiseWorkLogDateFormat)\r\n        .subtract(1, 'day')\r\n        .format(dayWiseWorkLogDateFormat);\r\n    },\r\n    setCurrentDate: (state, action: PayloadAction<{ dateValue?: Date, stringValue?: string }>) => {\r\n      if (action.payload.dateValue) {\r\n        state.dayWiseWorkLogDate = moment(action.payload.dateValue).format(dayWiseWorkLogDateFormat);\r\n      } else if (action.payload.stringValue) {\r\n        state.dayWiseWorkLogDate = action.payload.stringValue\r\n      }\r\n    },\r\n    reloadSubmittedWorkLogs: (state, action: PayloadAction<Set<string>>) => {\r\n      state.datesForWhichWorkLogsLoaded = state.datesForWhichWorkLogsLoaded.filter(r => !action.payload.has(r))\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(loadPendingWorkLogs.fulfilled, (state, action) => {\r\n      state.pendingWorkLog = action.payload\r\n    });\r\n    builder.addCase(addPendingWorkLog.fulfilled, (state, action) => {\r\n      state.pendingWorkLog.push(action.payload)\r\n    });\r\n    builder.addCase(updatePendingWorkLog.fulfilled, (state, action) => {\r\n      let workLog = state.pendingWorkLog.find(r => r.id === action.payload.id);\r\n      lodash.merge(workLog, action.payload);\r\n    });\r\n    builder.addCase(deletePendingWorkLog.fulfilled, (state, action) => {\r\n      const index = state.pendingWorkLog.findIndex(r => r.id === action.payload)\r\n      if (index !== -1) {\r\n        state.pendingWorkLog.splice(index, 1);\r\n      }\r\n    });\r\n    builder.addCase(resumePendingWorkLog.fulfilled, (state, action) => {\r\n      let workLog = state.pendingWorkLog.find(r => r.id === action.payload.id);\r\n      lodash.merge(workLog, action.payload);\r\n    });\r\n    builder.addCase(pausePendingWorkLog.fulfilled, (state, action) => {\r\n      if (action.payload !== null) {\r\n        let workLog = state.pendingWorkLog.find(r => r.id === action.payload?.id);\r\n        lodash.merge(workLog, action.payload);\r\n        console.log(\"updatedWork:\" , workLog)\r\n      }\r\n    });\r\n    builder.addCase(uploadPendingWorkLog.fulfilled, (state, action) => {\r\n      const index = state.pendingWorkLog.findIndex(r => r.id === action.payload.pendingWorkLog.id)\r\n      if (index !== -1) {\r\n        state.pendingWorkLog.splice(index, 1);\r\n      }\r\n      state.submittedWorkLogs.push(action.payload.uploadedWorkLog)\r\n      const pendingWorkLog = action.payload.pendingWorkLog\r\n      if (pendingWorkLog.hasNotes && pendingWorkLog.notes) {\r\n        state.notes.push(pendingWorkLog.notes)\r\n      }\r\n    });\r\n    builder.addCase(loadWorkLogsByDate.fulfilled, (state, action) => {\r\n      console.log(\"Submitted WorkLog old\", lodash.cloneDeep(state.submittedWorkLogs))\r\n      state.submittedWorkLogs = [\r\n        ...state.submittedWorkLogs.filter(r => moment(r.started, JiraDateTimeFormat).format(dayWiseWorkLogDateFormat) !== action.payload.date),\r\n        ...action.payload.workLogs\r\n      ];\r\n      state.submittedWorkLogs = lodash.uniqWith(state.submittedWorkLogs, (a, b) => lodash.isEqualWith(a, b, (a, b) => a.id === b.id)); // extra safety\r\n      const dateString = action.payload.date\r\n      if (state.datesForWhichWorkLogsLoaded.indexOf(dateString) < 0) {\r\n        state.datesForWhichWorkLogsLoaded.push(dateString)\r\n      }\r\n    });\r\n\r\n    builder.addCase(loadNotes.fulfilled, (state, action) => {\r\n      state.notes = action.payload\r\n    });\r\n    builder.addCase(addNote.fulfilled, (state, action) => {\r\n      state.notes.push(action.payload)\r\n    });\r\n    builder.addCase(updateNote.fulfilled, (state, action) => {\r\n      let notes = state.notes.find(r => r.id === action.payload.id);\r\n      lodash.merge(notes, action.payload);\r\n    });\r\n    builder.addCase(deleteNote.fulfilled, (state, action) => {\r\n      const index = state.notes.findIndex(r => r.id === action.payload)\r\n      if (index !== -1) {\r\n        state.notes.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n})\r\n\r\nexport const workLogActions = workLogSlice.actions\r\n\r\nexport default workLogSlice.reducer","import { mainMenuActions } from './slices/mainMenuSlice';\r\nimport { settingsActions } from './slices/settingsSlice';\r\nimport { workLogActions } from './slices/workLogSlice';\r\n\r\nexport const actions = {\r\n    mainMenu: mainMenuActions,\r\n    workLog: workLogActions,\r\n    settings: settingsActions\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/storeHooks';\r\nimport { actions } from '../../store/actions';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: 36,\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function Header() {\r\n    const classes = useStyles();\r\n    const headerTitle = useAppSelector(state => state.mainMenu.headerTitle)\r\n    const menuOpen = useAppSelector(state => state.mainMenu.open)\r\n    const dispatch = useAppDispatch()\r\n    const openDrawer = () => {\r\n        dispatch(actions.mainMenu.openDrawer())\r\n    }\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: menuOpen,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={() => openDrawer()}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, {\r\n                        [classes.hide]: menuOpen,\r\n                    })}\r\n                >\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    {headerTitle}\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n","import clsx from 'clsx';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport QueryBuilder from '@material-ui/icons/QueryBuilder';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/storeHooks';\r\nimport { actions } from '../../store/actions';\r\nimport { Backup, Note, Receipt } from '@material-ui/icons';\r\n\r\nexport const drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: 'hidden',\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      ...theme.mixins.toolbar,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function MenuDrawer() {\r\n  const classes = useStyles();\r\n\r\n  const menuOpen = useAppSelector(state => state.mainMenu.open)\r\n  const dispatch = useAppDispatch()\r\n  const closeDrawer = () => {\r\n      dispatch(actions.mainMenu.closeDrawer())\r\n  }\r\n  return (<Drawer\r\n    variant=\"permanent\"\r\n    className={clsx(classes.drawer, {\r\n      [classes.drawerOpen]: menuOpen,\r\n      [classes.drawerClose]: !menuOpen,\r\n    })}\r\n    classes={{\r\n      paper: clsx({\r\n        [classes.drawerOpen]: menuOpen,\r\n        [classes.drawerClose]: !menuOpen,\r\n      }),\r\n    }}\r\n  >\r\n    <div className={classes.toolbar}>\r\n      <IconButton onClick={() => closeDrawer()}>\r\n        <ChevronLeftIcon />\r\n      </IconButton>\r\n    </div>\r\n    <Divider />\r\n    <List>\r\n      <ListItem button component={Link} to=\"/work-log\">\r\n        <ListItemIcon><QueryBuilder /></ListItemIcon>\r\n        <ListItemText primary={\"Work Log\"} />\r\n      </ListItem>\r\n    </List>\r\n    {/* <List>\r\n      <ListItem button component={Link} to=\"/scrum\">\r\n        <ListItemIcon><Receipt /></ListItemIcon>\r\n        <ListItemText primary={\"Scrum Generator\"} />\r\n      </ListItem>\r\n    </List> */}\r\n    <List>\r\n      <ListItem button component={Link} to=\"/notes\">\r\n        <ListItemIcon><Note /></ListItemIcon>\r\n        <ListItemText primary={\"Notes\"} />\r\n      </ListItem>\r\n    </List>\r\n    <Divider />\r\n    <List>\r\n      <ListItem button component={Link} to=\"/backup\">\r\n        <ListItemIcon><Backup /></ListItemIcon>\r\n        <ListItemText primary={\"Backup\"} />\r\n      </ListItem>\r\n    </List>\r\n    <List>\r\n      <ListItem button component={Link} to=\"/settings\">\r\n        <ListItemIcon><SettingsIcon /></ListItemIcon>\r\n        <ListItemText primary={\"Settings\"} />\r\n      </ListItem>\r\n    </List>\r\n  </Drawer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport StaticServices from \"../../services\";\r\nimport { JiraIssueBasicInt, JiraIssuePickerResponseInt } from \"../../types\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { CircularProgress, TextField } from \"@material-ui/core\";\r\n\r\nfunction processJiraSuggestion(response: JiraIssuePickerResponseInt): JiraIssueBasicInt[] {\r\n    let result: JiraIssueBasicInt[] = [];\r\n    let set = new Set<string>()\r\n    response.sections.forEach(section => {\r\n        section.issues.forEach(issue => {\r\n            if(!set.has(issue.key)) {\r\n                set.add(issue.key);\r\n                result.push(issue);\r\n            }\r\n        })\r\n    });\r\n    set.clear();\r\n    return result;\r\n}\r\n\r\ninterface JiraIssueSearchProps{\r\n    initialValue?: JiraIssueBasicInt|null,\r\n    onChange: (value: JiraIssueBasicInt|null) => any,\r\n    fullWidth?: boolean,\r\n    autoFocus?: boolean\r\n}\r\n\r\nfunction getLabelForOption(option: JiraIssueBasicInt) {\r\n    return option.key+ \" \" + option.summaryText\r\n}\r\n\r\nexport function JiraIssueSearch(props: JiraIssueSearchProps) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<JiraIssueBasicInt[]>([]);\r\n    const [queryString, setQueryString] = React.useState<string>(props.initialValue ? getLabelForOption(props.initialValue): \"\");\r\n    const [loading, setLoading] = React.useState(false);\r\n    React.useEffect(() => {\r\n        if(open) {\r\n            let active = true;\r\n            \r\n            if (!loading) {\r\n                return undefined;\r\n            }\r\n            \r\n            StaticServices.JiraRestApiService.getIssueSuggestion(queryString)\r\n            .then(res => active && (setOptions(processJiraSuggestion(res)), setLoading(false)))\r\n            .catch(StaticServices.CommonLogService.logError)\r\n            return () => {\r\n                active = false;\r\n            };\r\n        } else {\r\n            setLoading(false)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        } else if(options.length === 0){\r\n            setLoading(true);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            setLoading(true);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [queryString]);\r\n\r\n    const onSelectIssue = (option: JiraIssueBasicInt| null) => {\r\n        setQueryString(option? getLabelForOption(option): \"\")\r\n        props.onChange(option)\r\n    }\r\n    return (\r\n        <Autocomplete\r\n            fullWidth={props.fullWidth ? true: false}\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false);\r\n            }}\r\n            getOptionSelected={(option, value) => option.key === value.key}\r\n            getOptionLabel={(option) => getLabelForOption(option)}\r\n            options={options}\r\n            loading={loading}\r\n            defaultValue={props.initialValue}\r\n            onChange={(e, value) => onSelectIssue(value)}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    autoFocus={props.autoFocus}\r\n                    label=\"Jira Issue\"\r\n                    variant=\"outlined\"\r\n                    value={queryString ? queryString: \"\"}\r\n                    onChange={e => setQueryString(e.target.value)}\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n}","import { Grid, TextField, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { InfoRounded } from \"@material-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport { convertJiraTimeFormatToSeconds, convertTimeInSecondToJiraTimeFormat } from \"../../utils/jiraUtils\";\r\n\r\ninterface PropsType {\r\n    timeInSeconds: number,\r\n    onChange: (timeInSeconds: number) => void,\r\n    autoFocus: boolean\r\n}\r\n\r\nexport function JiraTimeInput(props: PropsType) {\r\n    const { text, seconds } = convertTimeInSecondToJiraTimeFormat(props.timeInSeconds)\r\n    const [timeString, setTimeString] = useState<string>(text);\r\n    const [timeValue, setTimeValue] = useState<number>(props.timeInSeconds - seconds)\r\n    const [inputSeconds, setInputSeconds] = useState<number>(seconds);\r\n    const [invalidString, setInvalidString] = useState<boolean>(false);\r\n    return <Grid container>\r\n        <Grid item xs={6}>\r\n            <TextField\r\n                autoFocus={props.autoFocus}\r\n                fullWidth\r\n                label=\"Total Time Spent\"\r\n                value={timeString}\r\n                error={invalidString}\r\n                onChange={(e) => {\r\n                    let value = e.target.value;\r\n                    let valueInSeconds = convertJiraTimeFormatToSeconds(value)\r\n                    const invalid = valueInSeconds === -1\r\n                    props.onChange(valueInSeconds + (invalid ? 0: inputSeconds))\r\n                    setTimeValue(valueInSeconds)\r\n                    setInvalidString(invalid)\r\n                    setTimeString(value)\r\n                }}\r\n                type=\"text\"\r\n                variant=\"outlined\"\r\n                inputProps={{\r\n                    maxLength: 12,\r\n                }}\r\n                InputProps={{\r\n                    endAdornment: (\r\n                        <Tooltip title={\r\n                            <div style={{ fontSize: 13 }}>\r\n                                Format: <b>([0-9.]+[hm]?)+ </b>\r\n                                <br/>Default unit is m and units are non-repeatable.\r\n                                <br/> <b>Example:</b> 1.5h 20m\r\n                            </div>}\r\n                            style={{ cursor: \"pointer\" }}>\r\n                            <InfoRounded />\r\n                        </Tooltip>\r\n                    ),\r\n                }}\r\n            />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <Typography align=\"center\" style={{ height: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\r\n                and\r\n            </Typography>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n            <TextField\r\n                fullWidth\r\n                label=\"Seconds\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                disabled={invalidString}\r\n                onChange={(e) => {\r\n                    let stringValue = e.target.value;\r\n                    let numberValue = 0;\r\n                    if(stringValue) {\r\n                        numberValue = Number.parseInt(stringValue)\r\n                        if(numberValue<0) {\r\n                            numberValue = 0\r\n                        } else if (numberValue >= 60){\r\n                            numberValue = 59\r\n                        }\r\n                    }\r\n                    setInputSeconds(numberValue);\r\n                    props.onChange(timeValue + numberValue)\r\n                }}\r\n                value={inputSeconds}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}","import { createStyles, makeStyles, Theme } from \"@material-ui/core\"\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    horizontal: {\r\n        overflowX: \"auto\",\r\n        maxWidth: \"100%\",\r\n        whiteSpace: \"nowrap\",\r\n        touchAction: \"none\",\r\n        paddingBottom: 5,\r\n        \"&::-webkit-scrollbar-track\": {\r\n            visibility: \"hidden\"\r\n        },\r\n        \"&::-webkit-scrollbar-thumb\": {\r\n            visibility: \"hidden\"\r\n        },\r\n        \"&::-webkit-scrollbar-thumb:hover\": {\r\n            visibility: \"hidden\"\r\n        },\r\n        \"&:hover\": {\r\n            \"&::-webkit-scrollbar-track\": {\r\n                visibility: \"visible\"\r\n            },\r\n            \"&::-webkit-scrollbar-thumb\": {\r\n                visibility: \"visible\"\r\n            },\r\n            \"&::-webkit-scrollbar-thumb:hover\": {\r\n                visibility: \"visible\"\r\n            },\r\n        }\r\n    }\r\n}))\r\n\r\nexport default function HorizontalView({children}: {children: any}) {\r\n    const classes = useStyles();\r\n    const ref = useRef<any>(null)\r\n    useEffect(() => {\r\n        if(ref.current){\r\n            ref.current.addEventListener(\"wheel\", (e: any) => {\r\n                if (e.deltaY == 0) return;\r\n                e.preventDefault();\r\n                ref.current.scrollTo({\r\n                    left: ref.current.scrollLeft + (e.deltaY * 2),\r\n                    behavior: \"smooth\"\r\n                });\r\n            }, false)\r\n        }\r\n        return () => {\r\n            if(ref.current) {\r\n                ref.current.addEventListener(\"wheel\", (e:any) => e.stopImmediatePropagation(), true)\r\n            }\r\n        }\r\n    }, [ref])\r\n    return <div className={classes.horizontal} ref={ref}>\r\n        {children}\r\n    </div>\r\n}","import { Avatar, Chip, createStyles, makeStyles } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { CommentSuggestionsInt } from \"../../types\";\r\nimport HorizontalView from \"./HorizontalView\";\r\nimport lodash from 'lodash'\r\nimport StaticServices from \"../../services\";\r\n\r\nconst useStyles = makeStyles(() => createStyles({\r\n    chip: {\r\n        marginLeft: 5,\r\n        marginRight: 5,\r\n    }\r\n}));\r\n\r\nfunction getAssociatedField<T>(issue: any, levelOfProperties: string[][] | undefined): T | undefined {\r\n    let value: any = undefined\r\n    if (levelOfProperties != undefined) {\r\n        levelOfProperties.forEach((properties, i) => {\r\n            const src = i ? value : issue;\r\n            let currentValue:any = undefined;\r\n            properties.forEach(property => {\r\n                let propertyValue = lodash.get(src, property, undefined)\r\n                if (!currentValue && propertyValue) {\r\n                    currentValue = propertyValue\r\n                }\r\n            });\r\n            value = currentValue\r\n        });\r\n    }\r\n    return value as T\r\n}\r\n\r\nexport default function CommentSuggestions({ issueKey, onClick }: {\r\n    issueKey: string,\r\n    onClick: (comment: string) => any\r\n}) {\r\n    const classes = useStyles()\r\n    const [suggestions, setSuggestions] = useState<CommentSuggestionsInt[]>([])\r\n    const [issue, setIssue] = useState<any>()\r\n    const getAvatar = (suggestion: CommentSuggestionsInt) => {\r\n        if (suggestion.avatarLink) {\r\n            return <Avatar src={suggestion.avatarLink} />\r\n        }\r\n        if (suggestion.avatarString) {\r\n            return <Avatar>{suggestion.avatarString}</Avatar>\r\n        }\r\n        if (suggestion.avatarParams || suggestion.avatarLinkParams) {\r\n            const value = getAssociatedField(issue, suggestion.avatarLinkParams ? suggestion.avatarLinkParams : suggestion.avatarParams)\r\n            if (suggestion.avatarLinkParams) {\r\n                return <Avatar src={value as string} />\r\n            } else {\r\n                return <Avatar>{value as string}</Avatar>\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    const getComment = (suggestion: CommentSuggestionsInt) => {\r\n        let comment = suggestion.comment\r\n        if (suggestion.commentParams) {\r\n            suggestion.commentParams.forEach(param => {\r\n                const value = getAssociatedField(issue, param.properties) as string\r\n                comment = comment.split(\"$$\" + param.key).join(value ? value : \"\")\r\n            })\r\n        }\r\n        return comment;\r\n    }\r\n    const onClickChip = (suggestion: CommentSuggestionsInt) => {\r\n        onClick(getComment(suggestion))\r\n    }\r\n    useEffect(() => {\r\n        const newSuggestions: CommentSuggestionsInt[] = []\r\n        newSuggestions.push({\r\n            label: \"Bug\",\r\n            avatarString: \"C\",\r\n            comment: `Analysis of the root cause of the issue and fix`,\r\n        });\r\n        newSuggestions.push({\r\n            label: \"Implementation\",\r\n            avatarString: \"C\",\r\n            comment: `Analysis of the requirement and implement`,\r\n        });\r\n        newSuggestions.push({\r\n            label: \"Review Assignee\",\r\n            avatarLinkParams: [[\"assignee\"], [\"avatarUrls\"], [\"48x48\", \"32x32\", \"24x24\", \"16x16\"]],\r\n            comment: `Review code changes of $$assignee`,\r\n            commentParams: [{ key: \"assignee\", properties: [[\"assignee\"], [\"displayName\"]] }]\r\n        });\r\n        newSuggestions.push({\r\n            label: \"Discussion Assignee\",\r\n            avatarLinkParams:  [[\"assignee\"], [\"avatarUrls\"], [\"48x48\", \"32x32\", \"24x24\", \"16x16\"]],\r\n            comment: `Discussion with $$assignee`,\r\n            commentParams: [{ key: \"assignee\", properties: [[\"assignee\"], [\"displayName\"]] }]\r\n        });\r\n        setSuggestions(newSuggestions);\r\n    }, [])\r\n    useEffect(() => {\r\n        if (issueKey) {\r\n            StaticServices.JiraRestApiService\r\n                .getIssueDetails(issueKey)\r\n                .then(issue => setIssue(issue))\r\n        } else {\r\n            setIssue(undefined)\r\n        }\r\n    }, [issueKey])\r\n    return <HorizontalView>\r\n        {suggestions.map((suggestion, i) => <Chip key={i}\r\n            label={suggestion.label}\r\n            avatar={getAvatar(suggestion)}\r\n            className={classes.chip}\r\n            onClick={() => onClickChip(suggestion)}\r\n            variant=\"outlined\" />)}\r\n    </HorizontalView>\r\n}","import React from \"react\";\r\nimport StaticServices from \"../../services\";\r\nimport { JiraUserPickerInt} from \"../../types\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Avatar, CircularProgress, ListItem, ListItemAvatar, ListItemText, TextField } from \"@material-ui/core\";\r\n\r\ninterface JiraUserSearchProps{\r\n    initialValue?: JiraUserPickerInt|null,\r\n    onChange: (value: JiraUserPickerInt|undefined) => any,\r\n    fullWidth?: boolean,\r\n    autoFocus?: boolean,\r\n    query?: string,\r\n    label: string\r\n}\r\n\r\nexport function JiraUserSearch(props: JiraUserSearchProps) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<JiraUserPickerInt[]>([]);\r\n    const [queryString, setQueryString] = React.useState<string>(props.initialValue ? props.initialValue.displayName: (props.query? props.query: \"\"));\r\n    const [loading, setLoading] = React.useState(false);\r\n    React.useEffect(() => {\r\n        if(open) {\r\n            let active = true;\r\n            \r\n            if (!loading) {\r\n                return undefined;\r\n            }\r\n            if(queryString) {\r\n                StaticServices.JiraRestApiService.getAllUsersForPicker(queryString)\r\n                    .then(res => active && (setOptions(res), setLoading(false)))\r\n                    .catch(StaticServices.CommonLogService.logError)\r\n            } else {\r\n                setOptions([]);\r\n                setLoading(false);\r\n            }\r\n            return () => {\r\n                active = false;\r\n            };\r\n        } else {\r\n            setLoading(false)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        } else if(options.length === 0){\r\n            setLoading(true);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            setLoading(true);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [queryString]);\r\n\r\n    const onSelectIssue = (option: JiraUserPickerInt| null) => {\r\n        setQueryString(option? option.displayName: \"\")\r\n        props.onChange(option ? option: undefined)\r\n    }\r\n    return (\r\n        <Autocomplete\r\n            fullWidth={props.fullWidth ? true: false}\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false);\r\n            }}\r\n            getOptionSelected={(option, value) => option.accountId === value.accountId}\r\n            getOptionLabel={(option) => option.displayName}\r\n            renderOption = {(option) => <ListItem>\r\n                <ListItemAvatar><Avatar src={option.avatarUrl}/></ListItemAvatar>\r\n                <ListItemText>{option.displayName}</ListItemText>\r\n            </ListItem>}\r\n            options={options}\r\n            loading={loading}\r\n            defaultValue={props.initialValue}\r\n            onChange={(e, value) => onSelectIssue(value)}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    autoFocus={props.autoFocus}\r\n                    label={props.label}\r\n                    variant=\"outlined\"\r\n                    value={queryString ? queryString: \"\"}\r\n                    onChange={e => setQueryString(e.target.value)}\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n}","import { Button, FormControl, Grid, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport React, { useState } from \"react\";\r\nimport { JiraUserPickerInt, NoteInt, NoteTypeInt } from \"../../types\";\r\nimport { JiraUserSearch } from \"../BasicComponents/JiraUserSearch\";\r\n\r\ninterface EditNotesProps {\r\n    note: NoteInt,\r\n    onChange?: () => any,\r\n    onSave?: (note: NoteInt) => any,\r\n    initialOnEditMode?: boolean\r\n}\r\nexport default function EditNotes(props: EditNotesProps) {\r\n    const {note, onSave, onChange} = props\r\n    const [type, setType] = useState<NoteTypeInt>(note.type)\r\n    const [rating, setRating] = useState<number|null>(note.rating)\r\n    const [forUser, setForUser] = useState<JiraUserPickerInt|undefined>(note.forUser)\r\n    const [details, setDetails] = useState<string>(note.details)\r\n    const [editMode, setEditMode] = useState<boolean>(!!props.initialOnEditMode)\r\n    const valueChanged = () => {\r\n        setEditMode(true)\r\n        if(onChange) {\r\n            onChange()\r\n        }\r\n    }\r\n    return <Grid container>\r\n        <Grid xs={12} style={{marginTop: 10}}>\r\n            <FormControl required fullWidth>\r\n                <InputLabel id=\"note-type\">Type</InputLabel>\r\n                <Select labelId=\"note-type\" value={type} onChange={(e) => (setType(e.target.value as NoteTypeInt), valueChanged())} fullWidth>\r\n                    <MenuItem value=\"Discussion\">Discussion</MenuItem>\r\n                    <MenuItem value=\"Code Review\">Code Review</MenuItem>\r\n                    <MenuItem value=\"Others\">Others</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </Grid>\r\n        <Grid xs={12} style={{marginTop: 10}}>\r\n            <JiraUserSearch initialValue={forUser} onChange={(r) => (setForUser(r), valueChanged())} fullWidth={true} label=\"For user\"/>\r\n        </Grid>\r\n        <Grid xs={12} style={{marginTop: 10}}>\r\n            <Rating\r\n                name=\"note-rating\"\r\n                value={rating}\r\n                onChange={(event, newValue) => {\r\n                    setRating(newValue);\r\n                    valueChanged();\r\n                }}\r\n            />\r\n        </Grid>\r\n        <Grid xs={12} style={{marginTop: 10}}>\r\n            <TextField label=\"Details\" value={details} multiline fullWidth onChange={e => (setDetails(e.target.value), valueChanged())}/>\r\n        </Grid>\r\n        {onSave && <Grid xs={12} style={{marginTop: 10}}>\r\n            <Button variant=\"contained\" color=\"primary\" disabled={!editMode} onClick={() => (onSave({...note, type, rating, forUser, details}), setEditMode(false))}>Save Note</Button>\r\n        </Grid>}\r\n    </Grid>\r\n}","import { Button, Checkbox, Chip, Dialog, DialogActions, DialogContent, DialogTitle, FormControlLabel, Grid, setRef, TextField, Typography } from \"@material-ui/core\";\r\nimport { Clear, ErrorSharp } from \"@material-ui/icons\";\r\nimport * as uuid from \"uuid\"\r\nimport moment from \"moment\";\r\nimport lodash from \"lodash\";\r\nimport React, { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/storeHooks\";\r\nimport { JiraIssueBasicInt, NoteInt, PendingWorkLogInt } from \"../../types\";\r\nimport { dayWiseWorkLogDateFormat, JiraDateTimeFormat, UiDateTimeLocalFormat } from \"../../utils/dateUtils\";\r\nimport { convertJiraCommentToText, convertTextToJiraComment } from \"../../utils/jiraUtils\";\r\nimport { JiraIssueSearch } from \"../BasicComponents/JiraIssueSearch\";\r\nimport { JiraTimeInput } from \"../BasicComponents/JiraTimeInput\";\r\nimport { addPendingWorkLog, pausePendingWorkLog, resumePendingWorkLog, updatePendingWorkLog } from \"../../store/thunks/workLogThunks\";\r\nimport CommentSuggestions from \"../BasicComponents/CommentSuggestions\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport EditNotes from \"./EditNotes\";\r\n\r\nexport function getBlankWorkLog() {\r\n    let workLog: PendingWorkLogInt = {\r\n        id: uuid.v4(),\r\n        comment: convertTextToJiraComment(\"\"),\r\n        started: \"\",\r\n        timeSpentSeconds: 0,\r\n        issueId: \"\",\r\n        issueKey: \"\",\r\n        issueSummaryText: \"\",\r\n        resumed: \"\"\r\n    }\r\n    return workLog;\r\n}\r\n\r\nexport function getBlankNote(): NoteInt {\r\n    return {\r\n        id: uuid.v4(),\r\n        details: \"\",\r\n        type: \"Others\",\r\n        rating: null\r\n    }\r\n}\r\n\r\ninterface PropsType {\r\n    workLog?: PendingWorkLogInt,\r\n    onClose: () => any,\r\n    issue?: JiraIssueBasicInt,\r\n    create: boolean\r\n}\r\n\r\nexport function EditWorkLog(props: PropsType) {\r\n    const currentDateString = useAppSelector(state => state.workLog.dayWiseWorkLogDate);\r\n    const dispatch = useAppDispatch();\r\n    const calculateStartedDate = () => {\r\n        if (props.workLog) {\r\n            return moment(props.workLog.started, JiraDateTimeFormat).format(UiDateTimeLocalFormat);\r\n        } else {\r\n            const currentDate = moment(currentDateString, dayWiseWorkLogDateFormat);\r\n            return moment().date(currentDate.date()).month(currentDate.month()).year(currentDate.year()).format(UiDateTimeLocalFormat)\r\n        }\r\n    }\r\n    const [issue, setIssue] = useState<JiraIssueBasicInt | null>(props.issue ? props.issue : null)\r\n    const [started, setStarted] = useState<string>(calculateStartedDate())\r\n    const [timeSpentSeconds, setTimeSpentSeconds] = useState<number>(props.workLog ? props.workLog.timeSpentSeconds : 0)\r\n    const [comment, setComment] = useState<string>(props.workLog ? convertJiraCommentToText(props.workLog.comment) : \"\");\r\n    const [errorText, setErrorText] = useState<string>(\"\");\r\n    const [hasNotes, setHasNotes] = useState<boolean>(props.workLog && props.workLog.hasNotes ? true : false)\r\n    const [notes, setNotes] = useState<NoteInt>(props.workLog && props.workLog.notes ? props.workLog.notes : getBlankNote())\r\n    const resumed = props.workLog && props.workLog.resumed ? moment(props.workLog.resumed, JiraDateTimeFormat).format(UiDateTimeLocalFormat) : \"\";\r\n    const [saveEnabled, setSaveEnabled] = useState<boolean>(true)\r\n    const isNew = props.create\r\n\r\n    const validate = () => {\r\n        if (!issue) {\r\n            setErrorText(\"Please select an issue\")\r\n            return false;\r\n        } else if (!started) {\r\n            setErrorText(\"Please select start date\")\r\n            return false;\r\n        } else if (timeSpentSeconds < 0) {\r\n            setErrorText(\"Please set a valid value in time spent field\")\r\n            return false;\r\n        } else if (!comment) {\r\n            setErrorText(\"Please enter comments\")\r\n            return false;\r\n        }\r\n        return true\r\n    }\r\n\r\n    const getUpdatedWorkLog = () => {\r\n        const workLog = props.workLog\r\n            ? lodash.cloneDeep(props.workLog)\r\n            : getBlankWorkLog();\r\n        if (issue) {\r\n            workLog.issueId = issue.id\r\n            workLog.issueKey = issue.key\r\n            workLog.issueSummaryText = issue.summaryText\r\n        }\r\n        workLog.started = moment(started, UiDateTimeLocalFormat).format(JiraDateTimeFormat)\r\n        workLog.timeSpentSeconds = timeSpentSeconds\r\n        workLog.comment = convertTextToJiraComment(comment)\r\n        workLog.hasNotes = hasNotes\r\n        workLog.notes = notes\r\n        return workLog\r\n    }\r\n\r\n    const saveWorkLog = (start?: boolean) => {\r\n        if (validate()) {\r\n            const workLog = getUpdatedWorkLog();\r\n            let promise:Promise<any> = dispatch(isNew ? addPendingWorkLog(workLog) : updatePendingWorkLog(workLog))\r\n            if (start) {\r\n                promise = promise\r\n                    .then(() => dispatch(pausePendingWorkLog(null)))\r\n                    .then(() => dispatch(resumePendingWorkLog(workLog)))\r\n            }\r\n            promise.then(() => props.onClose())\r\n                .catch(console.error)\r\n        }\r\n    }\r\n\r\n    console.log(\"Time\", props)\r\n\r\n    return <Dialog open={true} aria-labelledby=\"form-dialog-title\" maxWidth=\"md\">\r\n        <DialogTitle id=\"form-dialog-title\">{props.workLog ? \"Edit Work Log\" : \"Create Work Log\"}</DialogTitle>\r\n        <DialogContent>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{ margin: 10 }}>\r\n                    <JiraIssueSearch initialValue={issue} onChange={(value) => setIssue(value)} fullWidth />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Grid container justify=\"space-around\">\r\n                        <Grid item xs={6} style={{ padding: 10 }}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Started at\"\r\n                                type=\"datetime-local\"\r\n                                value={started}\r\n                                onChange={(e) => setStarted(e.target.value)}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{ padding: 10 }}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Resumed at\"\r\n                                type={resumed ? \"datetime-local\" : \"text\"}\r\n                                value={resumed}\r\n                                disabled={true}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} style={{ margin: 10 }}>\r\n                    <JiraTimeInput autoFocus timeInSeconds={timeSpentSeconds} onChange={(value) => { setTimeSpentSeconds(value) }} />\r\n                </Grid>\r\n                <Grid xs={12} style={{ margin: 10 }}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Comments\"\r\n                        type=\"text\"\r\n                        size=\"medium\"\r\n                        value={comment}\r\n                        onChange={(e) => setComment(e.target.value)}\r\n                        multiline\r\n                        rows={2}\r\n                        rowsMax={6}\r\n                    />\r\n                </Grid>\r\n                <Grid xs={12} style={{ margin: 10 }}>\r\n                    <Grid container>\r\n                        <Grid item xs={1}>\r\n                            <Chip avatar={<Avatar><Clear /></Avatar>} label=\"Clear\" color=\"secondary\" variant=\"outlined\" onClick={() => setComment(\"\")} />\r\n                        </Grid>\r\n                        <Grid item xs={11}>\r\n                            <CommentSuggestions issueKey={issue ? issue.key : \"\"} onClick={setComment} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {errorText && <Grid xs={12} style={{ margin: 10, display: 'flex', flexDirection: \"row\" }}>\r\n                    <ErrorSharp color=\"secondary\" style={{ marginRight: 10 }} />\r\n                    <Typography color=\"secondary\">\r\n                        {errorText}\r\n                    </Typography>\r\n                </Grid>}\r\n                <Grid xs={12} style={{ margin: 10 }}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={hasNotes}\r\n                                color=\"primary\"\r\n                                onChange={(e) => {\r\n                                    setSaveEnabled(!e.target.checked)\r\n                                    setHasNotes(e.target.checked)\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"Add Notes\"\r\n                    />\r\n                    {\r\n                        hasNotes && <EditNotes note={notes} onSave={(n) => (setNotes(n), setSaveEnabled(true))} initialOnEditMode={!saveEnabled} onChange={() => setSaveEnabled(false)} />\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            {isNew && <Button onClick={() => saveWorkLog(true)} color=\"primary\" variant=\"outlined\" disabled={!saveEnabled}>Save and Start</Button>}\r\n            <Button onClick={() => saveWorkLog()} color=\"primary\" variant=\"contained\" disabled={!saveEnabled}>Save</Button>\r\n            <Button onClick={props.onClose} color=\"secondary\">Cancel</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n}","import { IconButton, Tooltip } from \"@material-ui/core\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { EditWorkLog } from \"./EditWorkLog\";\r\n\r\nexport function AddWorkLogButton() {\r\n    const [editWorkLogVisible, setEditWorkLogVisible] = useState(false)\r\n    return <Fragment>\r\n        <Tooltip title=\"Add new Work Log\">\r\n            <IconButton onClick={() => setEditWorkLogVisible(true)}>\r\n                <AddIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n        </Tooltip>\r\n        {editWorkLogVisible && <EditWorkLog onClose={() => setEditWorkLogVisible(false)} create/>}\r\n    </Fragment>\r\n}","import { Grid, IconButton, TextField, Tooltip } from \"@material-ui/core\";\r\nimport { ArrowLeft, ArrowRight } from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { actions } from \"../../../store/actions\";\r\nimport { dayWiseWorkLogDateFormat } from \"../../../utils/dateUtils\";\r\nimport React from \"react\";\r\nimport { AddWorkLogButton } from \"../AddWorkLogButton\";\r\nexport function Header() {\r\n    const currentDate = useAppSelector(state => state.workLog.dayWiseWorkLogDate);\r\n    const dispatch = useAppDispatch();\r\n    const toNextDay = () => dispatch(actions.workLog.incrementCurrentDate())\r\n    const toPreviousDay = () => dispatch(actions.workLog.decrementCurrentDate())\r\n    return <Grid container spacing={2} >\r\n        <Grid item xs={6}>\r\n            <Tooltip title=\"Previous Day\">\r\n                <IconButton onClick={() => toPreviousDay()}>\r\n                    <ArrowLeft fontSize=\"large\" />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <TextField\r\n                id=\"dayWiseWorkLogDate\"\r\n                label=\"Log Date\"\r\n                type=\"date\"\r\n                value={currentDate ? currentDate : moment().format(dayWiseWorkLogDateFormat)}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                onChange={(e) => dispatch(actions.workLog.setCurrentDate({ stringValue: e.target.value }))}\r\n                onKeyDown={(e) => e.preventDefault()}\r\n            />\r\n            <Tooltip title=\"Next Day\">\r\n                <IconButton onClick={() => toNextDay()}>\r\n                    <ArrowRight fontSize=\"large\" />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <AddWorkLogButton />\r\n        </Grid>\r\n    </Grid>\r\n}","import { Dialog, DialogTitle, DialogContent, DialogActions, Button, Grid, TextField, Select, MenuItem, IconButton } from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport React, { useState } from \"react\";\r\nimport { JiraDateTimeFormat, TimeFormatForView } from \"../../utils/dateUtils\";\r\nimport { convertTimeInSecondToJiraTimeFormat, convertJiraCommentToText } from \"../../utils/jiraUtils\";\r\nimport EnhancedTable, { BasicColumnType } from \"./EnhancedTable\";\r\nimport JiraTimeView from \"./JiraTimeView\";\r\nimport lodash from 'lodash'\r\nimport { Delete } from \"@material-ui/icons\";\r\n\r\nexport type OperatorType = \"=\" | \"<\" | \">\" | \"in\" | \"contains\"\r\nexport type FilterValueType = string | number | (string | number)[]\r\n\r\ninterface FilterDataProps<T> {\r\n    data: T[],\r\n    headerTitle?: string\r\n    columns: BasicColumnType<T, keyof T & string>[],\r\n    filters: FilterType<T>[],\r\n    onChange: (filters: FilterType<T>[]) => void,\r\n    onClose: () => any\r\n}\r\n\r\nexport interface FilterType<T> {\r\n    key: keyof T & string,\r\n    operator: OperatorType,\r\n    value: FilterValueType\r\n}\r\n\r\nfunction defaultComparator(operator: OperatorType, a: any, b: FilterValueType) {\r\n    if (typeof b == \"string\") b = b.toLowerCase()\r\n    if (typeof a == \"string\") a = a.toLowerCase()\r\n\r\n    if (operator == \"=\") {\r\n        return a == b\r\n    } else if (operator == \"<\") {\r\n        return a < b\r\n    }\r\n    if (operator == \">\") {\r\n        return a > b\r\n    }\r\n    if (operator == \"in\" && b instanceof Array) {\r\n        return b.includes(a)\r\n    }\r\n    if (operator == \"contains\" && typeof b == \"string\") {\r\n        return String(a).toLowerCase().includes(b)\r\n    }\r\n    return true\r\n}\r\n\r\nexport function filter<T>(data: T[], columns: BasicColumnType<T, keyof T & string>[], filters: FilterType<T>[]) {\r\n    return data.filter(row => {\r\n        return !filters.find(f => {\r\n            let column = columns.find(c => c.id === f.key)\r\n            if (column) {\r\n                let compareResult = null\r\n                if (column.comparator && typeof f.value == 'string') {\r\n                    compareResult = column.comparator(f.operator, row[f.key], f.value, defaultComparator)\r\n                }\r\n                if (compareResult === null) {\r\n                    compareResult = defaultComparator(f.operator, row[f.key], f.value)\r\n                }\r\n                return !compareResult\r\n            }\r\n            return false\r\n        })\r\n    })\r\n}\r\n\r\nexport default function FilterData<T>(props: FilterDataProps<T>) {\r\n    const [filters, setFilters] = useState<FilterType<T>[]>(lodash.cloneDeep(props.filters))\r\n    const addFilterAtFirst = () => {\r\n        const filter: FilterType<T> = {\r\n            key: props.columns[0].id,\r\n            operator: \"=\",\r\n            value: props.columns[0].numeric ? 0 : \"\"\r\n        }\r\n        setFilters([filter, ...filters])\r\n    }\r\n    return <Dialog open={true} aria-labelledby=\"form-dialog-title\" maxWidth=\"md\" fullWidth>\r\n        <DialogTitle id=\"form-dialog-title\">Filter: {props.headerTitle}</DialogTitle>\r\n        <DialogContent>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{ textAlign: \"center\"}}>\r\n                    <Button color=\"primary\" variant=\"contained\" onClick={() => addFilterAtFirst()}>Create filter</Button>\r\n                </Grid>\r\n                {\r\n                    filters.map((f, i) => <Grid item xs={12} key={i + 1}>\r\n                        <FilterRow data={props.data} columns={props.columns} filter={f} onChange={(nf) => setFilters(filters.map((_, j) => i == j ? nf : _))}\r\n                            onDelete={(a) => setFilters(filters.filter(b => a!=b))} />\r\n                    </Grid>)\r\n                }\r\n            </Grid>\r\n        </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => props.onChange(filters)} color=\"primary\" variant=\"contained\">OK</Button>\r\n                <Button onClick={() => props.onClose()} color=\"secondary\">Cancel</Button>\r\n            </DialogActions>\r\n    </Dialog>\r\n}\r\n\r\nfunction FilterRow<T>(props: {\r\n            data: T[],\r\n    columns: BasicColumnType<T, keyof T & string>[],\r\n    filter: FilterType<T>,\r\n    onChange: (f: FilterType<T>) => any,\r\n    onDelete: (f: FilterType<T>) => any\r\n}) {\r\n    const allOperators: OperatorType[] = [\"=\", \"<\", \">\", \"contains\", \"in\"]\r\n    return <Grid container spacing={4} style={{marginTop: 5, marginBottom: 5}}>\r\n                            <Grid item xs={4}>\r\n                                <Select\r\n                                    fullWidth\r\n                                    variant=\"outlined\" label=\"Column\" value={props.filter.key} onChange={event => props.onChange({ ...props.filter, key: event.target.value as keyof T & string })}>\r\n                                    {props.columns.map(c => <MenuItem key={c.id} value={c.id}>{c.label}</MenuItem>)}\r\n                                </Select>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <Select\r\n                                    fullWidth\r\n                                    variant=\"outlined\" label=\"Operation\" value={props.filter.operator} onChange={event => props.onChange({ ...props.filter, operator: event.target.value as OperatorType })}>\r\n                                    {allOperators.map(op => <MenuItem key={op} value={op}>{op}</MenuItem>)}\r\n                                </Select>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Value\"\r\n                                    variant=\"outlined\"\r\n                                    value={props.filter.value}\r\n                                    onChange={event => props.onChange({ ...props.filter, value: event.target.value as FilterValueType })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <IconButton color=\"secondary\" onClick={() => props.onDelete(props.filter)}><Delete /></IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { createStyles, lighten, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport { ClearAllRounded } from '@material-ui/icons';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport FilterData, { filter, FilterType, OperatorType } from './FilterData';\r\n\r\ntype SelectionMode = \"multiple\" | \"single\"| \"none\"\r\ntype Order = 'asc' | 'desc';\r\n\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\nfunction getComparator<Key extends keyof any & string>(\r\n    order: Order,\r\n    orderBy: Key,\r\n    descCompare?: (a: any, b:any) => 0|1|-1\r\n): (a: any, b: any) => number {\r\n    return order === 'desc'\r\n        ? (a, b) => (descCompare ? descCompare(a[orderBy], b[orderBy]) : descendingComparator(a, b, orderBy))\r\n        : (a, b) => -(descCompare ? descCompare(a[orderBy], b[orderBy]) : descendingComparator(a, b, orderBy));\r\n}\r\n\r\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\ninterface ColumnType<T, V extends (keyof T & string)> extends BasicColumnType<T, V>{\r\n    disablePadding: boolean;\r\n    disableSorting?: boolean;\r\n    renderColumn?: (row: T) => any;\r\n    align: \"center\" | \"right\" | \"left\";\r\n    descendingComparator?: (a: any, b:any) => 0|1|-1\r\n}\r\n\r\nexport interface BasicColumnType<T, V extends (keyof T & string)> {\r\n    id: V;\r\n    label: string;\r\n    numeric: boolean;\r\n    showFilters?: boolean;\r\n    comparator?: (operator: OperatorType, a: T[V], b:string, defaultComparator: (operator: OperatorType, a: any, b: string) => boolean) => boolean|null;\r\n    filterOperators?: OperatorType[]\r\n}\r\n\r\ninterface EnhancedTableProps<T> {\r\n    classes: ReturnType<typeof useStyles>;\r\n    numSelected: number;\r\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof T & string) => void;\r\n    onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    order: Order;\r\n    orderBy: string | undefined;\r\n    rowCount: number;\r\n    selectionMode: SelectionMode;\r\n    columns: ColumnType<T, keyof T & string>[];\r\n}\r\n\r\nconst StyledTableSortLabel = withStyles((theme: Theme) =>\r\ncreateStyles({\r\n    root: {\r\n      color: 'black',\r\n      \"&:hover\": {\r\n        color: 'black',\r\n      },\r\n      '&$active': {\r\n        color: 'black',\r\n      },\r\n    },\r\n    active: {},\r\n    icon: {\r\n      color: 'inherit !important'\r\n    },\r\n  })\r\n)(TableSortLabel)\r\n\r\nconst useHeaderStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        headCell: {\r\n            fondWeight: \"bolder\",\r\n            fontSize: \"20\"\r\n            // backgroundColor: theme.palette.primary.dark,\r\n            // color: theme.palette.common.black\r\n        }\r\n    }),\r\n);\r\n\r\nfunction EnhancedTableHead<T>(props: EnhancedTableProps<T>) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, selectionMode, columns } = props;\r\n    const createSortHandler = (property: keyof T & string) => (event: React.MouseEvent<unknown>) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    const styles = useHeaderStyles()\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {selectionMode === \"multiple\" && <TableCell padding=\"checkbox\" \r\n                        className={styles.headCell}>\r\n                    <Checkbox\r\n                        className={styles.headCell}\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>}\r\n                {columns.map((column) => (\r\n                    <TableCell\r\n                        className={styles.headCell}\r\n                        key={column.id as string}\r\n                        align={column.align}\r\n                        padding={column.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === column.id ? order : false}\r\n                    >\r\n                        {\r\n                            column.disableSorting\r\n                                ? column.label\r\n                                : <TableSortLabel\r\n                                    active={orderBy === column.id}\r\n                                    direction={orderBy === column.id ? order : 'asc'}\r\n                                    onClick={createSortHandler(column.id)}\r\n                                >\r\n                                    {column.label}\r\n                                    {orderBy === column.id ? (\r\n                                        <span className={classes.visuallyHidden}>\r\n                                            {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                        </span>\r\n                                    ) : null}\r\n                                </TableSortLabel>\r\n                        }\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingLeft: theme.spacing(2),\r\n            paddingRight: theme.spacing(1),\r\n        },\r\n        highlight:\r\n            theme.palette.type === 'light'\r\n                ? {\r\n                    color: theme.palette.secondary.main,\r\n                    backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n                }\r\n                : {\r\n                    color: theme.palette.text.primary,\r\n                    backgroundColor: theme.palette.secondary.dark,\r\n                },\r\n        title: {\r\n            flex: '1 1 100%',\r\n        },\r\n    }),\r\n);\r\n\r\ninterface ToolbarSelectionActionInt<T> {\r\n    renderIcon: (selectedRows: T[]) => any,\r\n    disabled: (selectedRows: T[]) => any,\r\n    toolTipText: (selectedRows: T[]) => string,\r\n    onClick: (selectedRows: T[]) => any\r\n}\r\n\r\ninterface EnhancedTableToolbarProps<T> {\r\n    selectedRows: T[];\r\n    headerTitle?: string;\r\n    selectionActions?: ToolbarSelectionActionInt<T>[];\r\n    clearSortingAndFilter: () => any;\r\n    openFilters: () => any\r\n}\r\n\r\nconst EnhancedTableToolbar = <T extends unknown>(props: EnhancedTableToolbarProps<T>) => {\r\n    const classes = useToolbarStyles();\r\n    const { selectedRows, headerTitle, clearSortingAndFilter, openFilters } = props;\r\n    const numSelected = selectedRows.length\r\n    const selectionActions = props.selectionActions ? props.selectionActions : []\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    {headerTitle ? headerTitle : \"\"}\r\n                </Typography>\r\n            )}\r\n            {numSelected > 0 ? selectionActions.map((action, i) =>\r\n                <Tooltip title={action.toolTipText(selectedRows)} key={i + 1}>\r\n                    <IconButton aria-label={action.toolTipText(selectedRows)} disabled={action.disabled(selectedRows)} onClick={() => action.onClick(selectedRows)}>\r\n                        {action.renderIcon(selectedRows)}\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <React.Fragment>\r\n                    <Tooltip title=\"Clear Filter and Sorting\">\r\n                        <IconButton aria-label=\"clear list\" onClick={() => clearSortingAndFilter()}>\r\n                            <ClearAllRounded />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Filter list\">\r\n                        <IconButton aria-label=\"filter list\" onClick={() => openFilters()}>\r\n                            <FilterListIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </React.Fragment>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        paper: {\r\n            width: '100%',\r\n            marginBottom: theme.spacing(2),\r\n        },\r\n        table: {\r\n            minWidth: 750,\r\n        },\r\n        visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n        },\r\n    }),\r\n);\r\n\r\ninterface EnhancedTablePropsInt<T> {\r\n    selection: {\r\n        mode: SelectionMode\r\n        by: \"row\" | \"checkbox\",\r\n        actions?: ToolbarSelectionActionInt<T>[]\r\n    },\r\n    headerTitle?: string\r\n    getRowKey: (row: T) => string\r\n    getRowStyle?: (row: T) => any\r\n    data: T[],\r\n    sorting: {\r\n        defaultSorting?: keyof T & string,\r\n        defaultSortingOrder: Order\r\n    }\r\n    columns: ColumnType<T, keyof T & string>[],\r\n    style?: any\r\n    fixedTopRowKey?: string\r\n}\r\n\r\nexport default function EnhancedTable<T>(props: EnhancedTablePropsInt<T>) {\r\n    const classes = useStyles();\r\n    const { selection, headerTitle, data, sorting, columns, getRowKey, getRowStyle, style, fixedTopRowKey } = props;\r\n    const [order, setOrder] = React.useState<Order>(sorting.defaultSortingOrder);\r\n    const [orderBy, setOrderBy] = React.useState<keyof T & string>();\r\n    const [selected, setSelected] = React.useState<T[]>([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const [filters, setFilters] = React.useState<FilterType<T>[]>([])\r\n    const [showFilters, setShowFilters] = React.useState<boolean>(false)\r\n\r\n    React.useEffect(() => {\r\n        if (selected.length) {\r\n            setSelected([])\r\n        }\r\n    }, [sorting.defaultSorting])\r\n\r\n    React.useEffect(() => {\r\n        if (sorting.defaultSorting) {\r\n            setOrderBy(sorting.defaultSorting)\r\n        }\r\n        setSelected([])\r\n    }, [data])\r\n\r\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof T & string) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (selection.mode === \"multiple\") {\r\n            if (event.target.checked) {\r\n                const newSelecteds = filteredRows;\r\n                setSelected(newSelecteds);\r\n                return;\r\n            }\r\n            setSelected([]);\r\n        }\r\n    };\r\n\r\n    const handleClick = (event: React.MouseEvent<unknown>, key: string) => {\r\n        const selectedIndex = selected.findIndex(r => getRowKey(r) === key);\r\n        const selectedRow = filteredRows.find(r => getRowKey(r) === key)\r\n        let newSelected: T[] = [];\r\n        if (selectedRow) {\r\n            if (selectedIndex === -1) {\r\n                if (selection.mode === \"multiple\") {\r\n                    newSelected = newSelected.concat(selected, selectedRow);\r\n                } else {\r\n                    newSelected.push(selectedRow)\r\n                }\r\n            } else if (selection.mode === \"multiple\") {\r\n                if (selectedIndex === 0) {\r\n                    newSelected = newSelected.concat(selected.slice(1));\r\n                } else if (selectedIndex === selected.length - 1) {\r\n                    newSelected = newSelected.concat(selected.slice(0, -1));\r\n                } else if (selectedIndex > 0) {\r\n                    newSelected = newSelected.concat(\r\n                        selected.slice(0, selectedIndex),\r\n                        selected.slice(selectedIndex + 1),\r\n                    );\r\n                }\r\n            }\r\n            setSelected(newSelected);\r\n        }\r\n    };\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    const isSelected = (rowKey: string) => selected.findIndex(r => getRowKey(r) === rowKey) !== -1;\r\n\r\n    let filteredRows = filter(data, columns, filters);\r\n    if (orderBy) {\r\n        filteredRows = stableSort(filteredRows, getComparator(order, orderBy, columns.find(r => r.id === orderBy)?.descendingComparator))\r\n    }\r\n    if(fixedTopRowKey) {\r\n        const theRow = filteredRows.find(r => getRowKey(r) === fixedTopRowKey);\r\n        if(theRow) {\r\n            filteredRows = [theRow, ...filteredRows.filter(r => getRowKey(r) !== fixedTopRowKey)]\r\n        }\r\n    }\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, filteredRows.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper} style={style} elevation={3}>\r\n                <EnhancedTableToolbar\r\n                    selectedRows={selected}\r\n                    headerTitle={headerTitle}\r\n                    selectionActions={selection.actions}\r\n                    clearSortingAndFilter={() => orderBy && setOrderBy(undefined)}\r\n                    openFilters={() => setShowFilters(true)} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? 'small' : 'medium'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={filteredRows.length}\r\n                            columns={columns}\r\n                            selectionMode={selection.mode}\r\n                        />\r\n                        <TableBody>\r\n                            {filteredRows\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(getRowKey(row));\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            style={getRowStyle ? getRowStyle(row): undefined}\r\n                                            hover\r\n                                            onClick={(selection.mode !== \"none\" && selection.by === \"row\")? (event) => handleClick(event, getRowKey(row)) : undefined}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={getRowKey(row)}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            {selection.mode !== \"none\" && <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    checked={isItemSelected}\r\n                                                    onClick={selection.by === \"checkbox\" ? (event) => handleClick(event, getRowKey(row)) : undefined}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>}\r\n                                            {\r\n                                                columns.map((column => <TableCell key={column.id} align={column.align}>\r\n                                                    {column.renderColumn ? column.renderColumn(row) : row[column.id]}\r\n                                                </TableCell>))\r\n                                            }\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={filteredRows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            <FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n                label=\"Dense padding\"\r\n            />\r\n            {\r\n                showFilters && <FilterData\r\n                    data={data}\r\n                    columns={columns}\r\n                    filters={filters}\r\n                    headerTitle={headerTitle}\r\n                    onChange={a => (setFilters(a), setShowFilters(false))}\r\n                    onClose={() => setShowFilters(false)}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n}","import moment from \"moment\";\r\nimport { Fragment } from \"react\";\r\nimport { useTick } from \"../../hooks/tickHook\";\r\nimport { JiraDateTimeFormat } from \"../../utils/dateUtils\";\r\nimport { convertTimeInSecondToJiraTimeFormat } from \"../../utils/jiraUtils\";\r\n\r\nexport default function JiraTimeView({\r\n    timeSpendInSeconds,\r\n    resumed,\r\n    roundSeconds\r\n}: {\r\n    timeSpendInSeconds: number,\r\n    resumed?: string,\r\n    roundSeconds?: boolean\r\n}) {\r\n    const tick = useTick(new Boolean(resumed));\r\n    let totalTimeSpent = timeSpendInSeconds;\r\n    if (resumed) {\r\n        totalTimeSpent += (tick - moment(resumed, JiraDateTimeFormat).toDate().getTime()) / 1000\r\n    }\r\n    totalTimeSpent = Math.ceil(totalTimeSpent)\r\n    const jiraTimeFormat = convertTimeInSecondToJiraTimeFormat(totalTimeSpent, roundSeconds)\r\n    let text = jiraTimeFormat.text\r\n    if(jiraTimeFormat.seconds > 0) {\r\n        if(text) {\r\n            text += \" \"\r\n        } else {\r\n            text = \"\"\r\n        }\r\n        text += jiraTimeFormat.seconds + \"s\"\r\n    }\r\n    if(!text) {\r\n        text = \"0\"\r\n    }\r\n    return <Fragment>{text}</Fragment>\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nexport function useTick(active: boolean|Boolean) {\r\n    const [tick, setTick] = useState(new Date().getTime());\r\n    useEffect(() => {\r\n        let interval:any = null\r\n        if(active) {\r\n            interval = setInterval(() => setTick(new Date().getTime()), 1000);\r\n        }\r\n        return () => {\r\n            if(interval) {\r\n                clearInterval(interval);\r\n            }\r\n        }\r\n    }, []);\r\n    return tick;\r\n}","import { Dialog, DialogTitle, DialogContent, DialogActions, Button } from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport React, { useState } from \"react\";\r\nimport { useAppDispatch } from \"../../hooks/storeHooks\";\r\nimport { uploadPendingWorkLog } from \"../../store/thunks/workLogThunks\";\r\nimport { PendingWorkLogInt } from \"../../types\";\r\nimport { JiraDateTimeFormat, TimeFormatForView } from \"../../utils/dateUtils\";\r\nimport { addRemainingSecondsToRound, convertJiraCommentToText, convertTimeInSecondToJiraTimeFormat } from \"../../utils/jiraUtils\";\r\nimport EnhancedTable from \"../BasicComponents/EnhancedTable\";\r\nimport JiraTimeView from \"../BasicComponents/JiraTimeView\";\r\n\r\nexport default function PublishWorkLogs({ workLogs, onClose }: { workLogs: PendingWorkLogInt[], onClose: () => any }) {\r\n    const dispatch = useAppDispatch();\r\n    const [submitEnabled, setSubmitEnabled] = useState(true)\r\n    const totalTimeInSeconds = workLogs.map(r => addRemainingSecondsToRound(r.timeSpentSeconds))\r\n        .reduce((t, r) => t + r, 0)\r\n    const publish = () => {\r\n        if(submitEnabled) {\r\n            setSubmitEnabled(false);\r\n            let promises: Promise<any>[] = []\r\n            workLogs.forEach(r => promises.push(dispatch(uploadPendingWorkLog(r))))\r\n            Promise.all(promises).then(() => onClose()).catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n    return <Dialog open={true} aria-labelledby=\"form-dialog-title\" maxWidth=\"lg\">\r\n        <DialogTitle id=\"form-dialog-title\">Upload Work Logs: {convertTimeInSecondToJiraTimeFormat(totalTimeInSeconds).text}</DialogTitle>\r\n        <DialogContent>\r\n            <EnhancedTable\r\n                data={workLogs}\r\n                getRowKey={(r) => r.id}\r\n                selection={{\r\n                    mode: \"none\",\r\n                    by: \"checkbox\"\r\n                }}\r\n                columns={[\r\n                    { id: \"issueKey\", numeric: false, disablePadding: false, label: 'Issue', align: \"left\" },\r\n                    {\r\n                        id: \"started\", numeric: false, disablePadding: false, label: 'Started', align: \"left\",\r\n                        renderColumn: (r) => moment(r.started, JiraDateTimeFormat).format(TimeFormatForView)\r\n                    },\r\n                    {\r\n                        id: \"timeSpentSeconds\", numeric: false, disablePadding: false, label: 'Time Spent', align: \"left\",\r\n                        renderColumn: (r) => <JiraTimeView timeSpendInSeconds={r.timeSpentSeconds} resumed={r.resumed} roundSeconds/>,\r\n                        descendingComparator: (a: any, b: any) => a>b ? -1: (a===b ? 0: 1)\r\n                    },\r\n                    {\r\n                        id: \"comment\", numeric: true, disablePadding: false, label: 'Comments', align: \"left\", disableSorting: true,\r\n                        renderColumn: (r) => convertJiraCommentToText(r.comment)\r\n                    },\r\n                ]}\r\n                sorting={{\r\n                    defaultSorting: \"started\",\r\n                    defaultSortingOrder: \"desc\"\r\n                }}\r\n            />\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={() => publish()} disabled={!submitEnabled} color=\"primary\" variant=\"contained\">Submit</Button>\r\n            <Button onClick={() => onClose()} color=\"secondary\">Cancel</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n}","import { makeStyles, Theme, createStyles, lighten, useTheme } from \"@material-ui/core\";\r\nimport { CloudUpload, Delete, Edit, Pause, PlayArrow, Publish } from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { deletePendingWorkLog, pausePendingWorkLog, resumePendingWorkLog } from \"../../../store/thunks/workLogThunks\";\r\nimport { PendingWorkLogInt } from \"../../../types\";\r\nimport { areSameDate, dayWiseWorkLogDateFormat, JiraDateTimeFormat, TimeFormatForView } from \"../../../utils/dateUtils\";\r\nimport { convertJiraCommentToText } from \"../../../utils/jiraUtils\";\r\nimport EnhancedTable from \"../../BasicComponents/EnhancedTable\";\r\nimport JiraTimeView from \"../../BasicComponents/JiraTimeView\";\r\nimport { EditWorkLog } from \"../EditWorkLog\";\r\nimport PublishWorkLogs from \"../PublishWorkLogs\";\r\nexport function PendingWorkLogList() {\r\n    const theme = useTheme()\r\n    const currentDate = useAppSelector(state => state.workLog.dayWiseWorkLogDate);\r\n    const dispatch = useAppDispatch();\r\n    const pendingWorkLogs = useAppSelector(state => state.workLog.pendingWorkLog);\r\n    const [currentSelectedWorkLog, setCurrentSelectedWorkLog] = useState<PendingWorkLogInt>()\r\n    const [selectedWorkLogsToUpload, setSelectedWorkLogsToUpload] = useState<PendingWorkLogInt[]>()\r\n    const [pendingWorkLogsOfCurrentDate, setPendingWorkLogsOfCurrentDate] = useState<PendingWorkLogInt[]>([])\r\n    \r\n    useEffect(() => {\r\n        setPendingWorkLogsOfCurrentDate(pendingWorkLogs.filter(r => areSameDate(moment(currentDate, dayWiseWorkLogDateFormat).toDate(), moment(r.started, JiraDateTimeFormat).toDate(), dayWiseWorkLogDateFormat)))\r\n    }, [currentDate, pendingWorkLogs]);\r\n    \r\n    const resumedWorkLog = pendingWorkLogsOfCurrentDate.find(r => r.resumed)\r\n    const isResumed = !!resumedWorkLog\r\n\r\n    const resumeTask = (rows: PendingWorkLogInt[]) => {\r\n        let promise: Promise<any> = Promise.resolve()\r\n        if(resumedWorkLog) {\r\n            promise = dispatch(pausePendingWorkLog(resumedWorkLog))\r\n        }\r\n        promise.then(() => dispatch(resumePendingWorkLog(rows[0])))\r\n    }\r\n\r\n    return <Fragment>\r\n        <EnhancedTable\r\n            data={pendingWorkLogsOfCurrentDate}\r\n            getRowKey={(r) => r.id}\r\n            getRowStyle={(r) => r.resumed ? { background: lighten(theme.palette.primary.light, 0.50) } : undefined}\r\n            selection={{\r\n                mode: \"multiple\",\r\n                by: \"row\",\r\n                actions: [\r\n                    {\r\n                        toolTipText: () => \"Upload\",\r\n                        renderIcon: () => <Publish />,\r\n                        disabled: (rows) => rows.filter(r => !r.resumed).length !== rows.length,\r\n                        onClick: (rows) => setSelectedWorkLogsToUpload(rows)\r\n                    },\r\n                    {\r\n                        toolTipText: () => \"Resume\" + (isResumed ? \". The current running task will be paused.\": \"\"),\r\n                        renderIcon: () => <PlayArrow />,\r\n                        disabled: (rows) => rows.length !== 1 || rows.filter(r => r.resumed).length >= 1,\r\n                        onClick: (rows) => resumeTask(rows)\r\n                    },\r\n                    {\r\n                        toolTipText: () => \"Pause\",\r\n                        renderIcon: () => <Pause />,\r\n                        disabled: (rows) => rows.length !== 1 || rows.filter(r => r.resumed).length !== rows.length,\r\n                        onClick: (rows) => rows.forEach(r => dispatch(pausePendingWorkLog(r)))\r\n                    },\r\n                    {\r\n                        toolTipText: () => \"Edit\",\r\n                        renderIcon: () => <Edit />,\r\n                        disabled: (rows) => rows.length !== 1,\r\n                        onClick: (rows) => setCurrentSelectedWorkLog(rows[0])\r\n                    },\r\n                    {\r\n                        toolTipText: () => \"Delete\",\r\n                        renderIcon: () => <Delete />,\r\n                        disabled: (rows) => rows.length === 0,\r\n                        onClick: (rows) => rows.forEach(r => dispatch(deletePendingWorkLog(r.id)))\r\n                    },\r\n                ]\r\n            }}\r\n            columns={[\r\n                { id: \"issueKey\", numeric: false, disablePadding: false, label: 'Issue', align: \"left\" },\r\n                {\r\n                    id: \"started\", numeric: false, disablePadding: false, label: 'Started', align: \"left\",\r\n                    renderColumn: (r) => moment(r.started, JiraDateTimeFormat).format(TimeFormatForView)\r\n                },\r\n                {\r\n                    id: \"timeSpentSeconds\", numeric: false, disablePadding: false, label: 'Time Spent', align: \"left\",\r\n                    renderColumn: (r) => <JiraTimeView timeSpendInSeconds={r.timeSpentSeconds} resumed={r.resumed} />,\r\n                    descendingComparator: (a: any, b: any) => a>b ? -1: (a===b ? 0: 1)\r\n                },\r\n                {\r\n                    id: \"comment\", numeric: true, disablePadding: false, label: 'Comments', align: \"left\", disableSorting: true,\r\n                    renderColumn: (r) => convertJiraCommentToText(r.comment)\r\n                },\r\n            ]}\r\n            sorting={{\r\n                defaultSorting: \"started\",\r\n                defaultSortingOrder: \"desc\"\r\n            }}\r\n            fixedTopRowKey={resumedWorkLog?.id}\r\n        />\r\n        {currentSelectedWorkLog && <EditWorkLog\r\n            workLog={currentSelectedWorkLog}\r\n            issue={{\r\n                id: currentSelectedWorkLog.issueId,\r\n                key: currentSelectedWorkLog.issueKey,\r\n                summaryText: currentSelectedWorkLog.issueSummaryText\r\n            }} onClose={() => setCurrentSelectedWorkLog(undefined)} create={false} />}\r\n        {selectedWorkLogsToUpload && <PublishWorkLogs\r\n            workLogs={selectedWorkLogsToUpload}\r\n            onClose={() => setSelectedWorkLogsToUpload(undefined)} />}\r\n\r\n    </Fragment>\r\n}","import moment from \"moment\";\r\nimport { Fragment, useEffect } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { loadWorkLogsByDate } from \"../../../store/thunks/workLogThunks\";\r\nimport { areSameDate, dayWiseWorkLogDateFormat, JiraDateTimeFormat, TimeFormatForView } from \"../../../utils/dateUtils\";\r\nimport { convertJiraCommentToText } from \"../../../utils/jiraUtils\";\r\nimport EnhancedTable from \"../../BasicComponents/EnhancedTable\";\r\nimport JiraTimeView from \"../../BasicComponents/JiraTimeView\";\r\n\r\nexport function SubmittedWorkLog() {\r\n    const currentDate = useAppSelector(state => state.workLog.dayWiseWorkLogDate);\r\n    const dispatch = useAppDispatch();\r\n    const datesForWhichWorkLogsLoaded = useAppSelector(state => state.workLog.datesForWhichWorkLogsLoaded);\r\n    const workLogs = useAppSelector(state => state.workLog.submittedWorkLogs);\r\n    // const [currentSelectedWorkLog, setCurrentSelectedWorkLog] = useState<JiraWorkLogInt>()\r\n    useEffect(() => {\r\n        if(datesForWhichWorkLogsLoaded.indexOf(currentDate) < 0) {\r\n            dispatch(loadWorkLogsByDate(moment(currentDate).toDate()));\r\n        }\r\n    }, [datesForWhichWorkLogsLoaded, dispatch, currentDate]);\r\n    return <Fragment>\r\n        <EnhancedTable\r\n            data={workLogs.filter(r => areSameDate(moment(currentDate, dayWiseWorkLogDateFormat).toDate(), moment(r.started, JiraDateTimeFormat).toDate(), dayWiseWorkLogDateFormat))}\r\n            getRowKey={(r) => r.id}\r\n            selection={{\r\n                mode: \"none\",\r\n                by: \"row\",\r\n                actions: [\r\n                    // {\r\n                    //     toolTipText: () => \"Edit\",\r\n                    //     renderIcon: () => <Edit />,\r\n                    //     disabled: (rows) => rows.length !== 1,\r\n                    //     onClick: (rows) => setCurrentSelectedWorkLog(rows[0])\r\n                    // },\r\n                ]\r\n            }}\r\n            columns={[\r\n                { id: \"issueKey\", numeric: false, disablePadding: false, label: 'Issue', align: \"left\" },\r\n                {\r\n                    id: \"started\", numeric: false, disablePadding: false, label: 'Started', align: \"left\",\r\n                    renderColumn: (r) => moment(r.started, JiraDateTimeFormat).format(TimeFormatForView)\r\n                },\r\n                {\r\n                    id: \"timeSpentSeconds\", numeric: false, disablePadding: false, label: 'Time Spent', align: \"left\",\r\n                    renderColumn: (r) => <JiraTimeView timeSpendInSeconds={r.timeSpentSeconds} />,\r\n                    descendingComparator: (a: any, b: any) => a>b ? -1: (a===b ? 0: 1)\r\n                },\r\n                {\r\n                    id: \"comment\", numeric: true, disablePadding: false, label: 'Comments', align: \"left\", disableSorting: true,\r\n                    renderColumn: (r) => convertJiraCommentToText(r.comment)\r\n                },\r\n            ]}\r\n            sorting={{\r\n                defaultSorting: \"started\",\r\n                defaultSortingOrder: \"desc\"\r\n            }}\r\n        />\r\n    </Fragment>\r\n}","import { createStyles, Grid, lighten, makeStyles, Paper, Theme, Typography } from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { JiraDateTimeFormat, dayWiseWorkLogDateFormat } from \"../../../utils/dateUtils\";\r\nimport JiraTimeView from \"../../BasicComponents/JiraTimeView\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            textAlign: \"center\",\r\n            padding: 20,\r\n            // fontWeight: \"bolder\",\r\n            fontSize: 20\r\n        },\r\n        label: {\r\n            // fontWeight: \"bolder\",\r\n            // fontSize: 16\r\n        },\r\n        root: {\r\n            padding: 10\r\n        },\r\n        resume: {\r\n            background: lighten(theme.palette.primary.light, 0.50)\r\n        }\r\n    })\r\n)\r\n\r\nexport function TotalWorkLogTimeCount() {\r\n    const pendingWorkLogs = useAppSelector(state => state.workLog.pendingWorkLog);\r\n    const workLogs = useAppSelector(state => state.workLog.submittedWorkLogs);\r\n    const date = useAppSelector(state => state.workLog.dayWiseWorkLogDate)\r\n    const styles = useStyles()\r\n\r\n    const totalSubmitted = workLogs.filter(r => moment(r.started, JiraDateTimeFormat).format(dayWiseWorkLogDateFormat) === date)\r\n        .map(r => r.timeSpentSeconds).reduce((r, a) => r + a, 0)\r\n\r\n    const totalPending = pendingWorkLogs.filter(r => moment(r.started, JiraDateTimeFormat).format(dayWiseWorkLogDateFormat) === date)\r\n        .map(r => r.timeSpentSeconds)\r\n        .reduce((r, a) => r + a, 0);\r\n\r\n    const resumed = pendingWorkLogs.filter(r => moment(r.started, JiraDateTimeFormat).format(dayWiseWorkLogDateFormat) === date).find(r => !!r.resumed)?.resumed\r\n    const total = totalSubmitted + totalPending\r\n\r\n    return <Grid container spacing={2} className={styles.root}>\r\n        <Grid item xs={4}>\r\n            <Paper elevation={3} className={styles.paper}>\r\n                <Typography className={styles.label}>Submitted</Typography>\r\n                <JiraTimeView timeSpendInSeconds={totalSubmitted} />\r\n            </Paper>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n            <Paper elevation={3} className={`${styles.paper} ${resumed ? styles.resume: \"\"}`}>\r\n                <Typography className={styles.label}>Pending</Typography>\r\n                <JiraTimeView timeSpendInSeconds={totalPending} resumed={resumed} />\r\n            </Paper>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n            <Paper elevation={3} className={styles.paper}>\r\n                <Typography className={styles.label}>Total</Typography>\r\n                <JiraTimeView timeSpendInSeconds={total} resumed={resumed} />\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n}","import classes from \"*.module.css\";\r\nimport { Accordion, AccordionDetails, AccordionSummary, createStyles, makeStyles, Paper, Theme, Typography } from \"@material-ui/core\";\r\nimport { ExpandMoreRounded } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { Header } from \"./Header\";\r\nimport { PendingWorkLogList } from \"./PendingWorkLogList\";\r\nimport { SubmittedWorkLog } from \"./SubmittedWorkLogList\";\r\nimport { TotalWorkLogTimeCount } from \"./TotalWorkLogTimeCount\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        noBefore: {\r\n            marginTop: 10,\r\n            '&::before': {\r\n                // background: \"none\",\r\n            }\r\n        }\r\n    })\r\n);\r\n\r\nexport function DayWiseWorkLog() {\r\n    const styles = useStyles();\r\n    return <Paper style={{ padding: 10}} elevation={0}>\r\n        <Header />\r\n        <hr style={{marginBottom: 10}}/>\r\n        <TotalWorkLogTimeCount />\r\n        <Accordion defaultExpanded elevation={3}>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreRounded />}\r\n                aria-controls=\"pending-work-log-accord-content\"\r\n                id=\"pending-work-log-accord-header\"\r\n            >\r\n                <Typography variant=\"h6\">Pending Work Log</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n                <PendingWorkLogList />\r\n            </AccordionDetails>\r\n        </Accordion>\r\n        <Accordion className={styles.noBefore} elevation={3}>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreRounded />}\r\n                aria-controls=\"pending-work-log-accord-content\"\r\n                id=\"pending-work-log-accord-header\"\r\n            >\r\n                <Typography variant=\"h6\">Submitted Work Log</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n                <SubmittedWorkLog />\r\n            </AccordionDetails>\r\n        </Accordion>\r\n    </Paper>\r\n}","import { IconButton, MenuItem, ListItemIcon, Typography } from \"@material-ui/core\";\r\nimport { MoreVert, Refresh } from \"@material-ui/icons\";\r\nimport { Fragment, useState } from \"react\";\r\nimport Menu from '@material-ui/core/Menu';\r\nimport moment, { Moment } from \"moment\";\r\nimport { dayWiseWorkLogDateFormat, getAllDatesWithinRange } from \"../../../utils/dateUtils\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { actions } from \"../../../store/actions\";\r\n\r\ninterface SummaryMenuProps {\r\n    onChangeDate: (from: string, to: string) => any,\r\n    setWeekly?: (isWeekly: boolean) => any,\r\n    fromDate: string,\r\n    toDate: string,\r\n}\r\nexport default function SummaryMenu(props: SummaryMenuProps) {\r\n    const { fromDate, toDate, onChangeDate } = props;\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n    const currentLogDate = useAppSelector(state => state.workLog.dayWiseWorkLogDate);\r\n    const dispatch = useAppDispatch()\r\n\r\n    const open = Boolean(anchorEl);\r\n    const allDates = getAllDatesWithinRange(fromDate, toDate)\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const reloadWorkLogs = () => {\r\n        dispatch(actions.workLog.reloadSubmittedWorkLogs(new Set(allDates)))\r\n    }\r\n\r\n    const updateWeekRange = (dateOfTheWeek: Moment) => {\r\n        const fd = dateOfTheWeek.format(dayWiseWorkLogDateFormat)\r\n        const td = dateOfTheWeek.weekday(6).format(dayWiseWorkLogDateFormat)\r\n        onChangeDate(fd, td)\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    const nextWeek = () => {\r\n        const date = moment(toDate).add(1, 'day').weekday(0)\r\n        updateWeekRange(date)\r\n    }\r\n\r\n    const previousWeek = () => {\r\n        const date = moment(fromDate).subtract(1, 'day').weekday(0)\r\n        updateWeekRange(date)\r\n    }\r\n\r\n    const currentWeek = () => {\r\n        const date = moment().weekday(0)\r\n        updateWeekRange(date)\r\n    }\r\n\r\n    const currentLogWeek = () => {\r\n        const date = moment(currentLogDate).weekday(0)\r\n        updateWeekRange(date)\r\n    }\r\n\r\n    return <Fragment>\r\n        <IconButton aria-label=\"refresh\" onClick={handleClick} >\r\n            <MoreVert />\r\n        </IconButton>\r\n        <Menu\r\n            id=\"long-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={open}\r\n            onClose={() => setAnchorEl(null)}\r\n        >\r\n            <MenuItem onClick={previousWeek} >\r\n                <Typography variant=\"inherit\">Previous Week</Typography>\r\n            </MenuItem>\r\n            <MenuItem onClick={nextWeek} >\r\n                <Typography variant=\"inherit\">Next Week</Typography>\r\n            </MenuItem>\r\n            <MenuItem onClick={currentWeek}>\r\n                <Typography variant=\"inherit\">Current Week</Typography>\r\n            </MenuItem>\r\n            <MenuItem onClick={currentLogWeek}>\r\n                <Typography variant=\"inherit\">Current Logging Week</Typography>\r\n            </MenuItem>\r\n            <MenuItem onClick={reloadWorkLogs}>\r\n                <ListItemIcon>\r\n                    <Refresh fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <Typography variant=\"inherit\">Reload</Typography>\r\n            </MenuItem>\r\n        </Menu>\r\n    </Fragment>\r\n}\r\n","import { TableRow, TableCell, makeStyles, createStyles, lighten, darken } from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { JiraDateTimeFormat } from \"../../../utils/dateUtils\";\r\nimport { roundTimeInSeconds } from \"../../../utils/jiraUtils\";\r\nimport JiraTimeView from \"../../BasicComponents/JiraTimeView\";\r\n\r\nconst useStyle = makeStyles((theme) => createStyles({\r\n    activeDate: {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: lighten(theme.palette.primary.light, 0.5),\r\n    },\r\n    date: {\r\n        color: theme.palette.primary.dark\r\n    },\r\n\r\n}))\r\n\r\ninterface WorklogSummaryRowProps {\r\n    fromDate: string,\r\n    toDate?: string,\r\n    cellStyle?: any,\r\n    rowStyle?: any\r\n}\r\n\r\nexport default function WorklogSummaryRow(props: WorklogSummaryRowProps) {\r\n    const date = props.fromDate\r\n    const classes = useStyle()\r\n    const pendingWorkLogs = useAppSelector(state => state.workLog.pendingWorkLog);\r\n    const workLogs = useAppSelector(state => state.workLog.submittedWorkLogs);\r\n    const currentActiveDate = useAppSelector(state => state.workLog.dayWiseWorkLogDate);\r\n\r\n    const isDateWithinRange = (started: string) => {\r\n        const toDate = props.toDate ? props.toDate: date\r\n        return moment(started, JiraDateTimeFormat).isBetween(date, toDate, \"day\", \"[]\")\r\n    }\r\n\r\n    const totalSubmitted = workLogs\r\n        .filter(r => isDateWithinRange(r.started))\r\n        .map(r => r.timeSpentSeconds).reduce((r, a) => r + a, 0)\r\n\r\n    const totalPending = pendingWorkLogs.filter(r => isDateWithinRange(r.started))\r\n        .map(r => roundTimeInSeconds(r.timeSpentSeconds))\r\n        .reduce((r, a) => r + a, 0);\r\n\r\n    const resumed = pendingWorkLogs.filter(r => isDateWithinRange(r.started)).find(r => !!r.resumed)?.resumed\r\n    const total = totalSubmitted + totalPending\r\n    return  <TableRow className={!props.toDate && currentActiveDate === date ? classes.activeDate: \"\"} style={props.rowStyle}>\r\n    <TableCell style={props.cellStyle} className={classes.date} component=\"th\" scope=\"row\">{props.toDate ? \"Total\" :moment(date).format(\"dddd\")}</TableCell>\r\n    <TableCell style={props.cellStyle} align=\"right\"><JiraTimeView timeSpendInSeconds={totalSubmitted}/></TableCell>\r\n    <TableCell style={props.cellStyle} align=\"right\"><JiraTimeView timeSpendInSeconds={totalPending} resumed={resumed} roundSeconds/></TableCell>\r\n    <TableCell style={props.cellStyle} align=\"right\"><JiraTimeView timeSpendInSeconds={total} resumed={resumed} roundSeconds/></TableCell>\r\n  </TableRow>\r\n}","import { Avatar, Card, CardContent, CardHeader, createStyles, IconButton, makeStyles, Table, TableCell, TableContainer, TableHead, TableRow } from \"@material-ui/core\";\r\nimport { Refresh } from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { actions } from \"../../../store/actions\";\r\nimport { loadWorkLogsByDate } from \"../../../store/thunks/workLogThunks\";\r\nimport { dayWiseWorkLogDateFormat, getAllDatesWithinRange } from \"../../../utils/dateUtils\";\r\nimport SummaryMenu from \"./SummaryMenu\";\r\nimport WorklogSummaryRow from \"./WorklogSummaryRow\";\r\n\r\nconst useStyles = makeStyles(theme => createStyles({\r\n    head: {\r\n        background: theme.palette.primary.dark,\r\n        color: theme.palette.common.white,\r\n    },\r\n    headCell: {\r\n        color: theme.palette.common.white\r\n    }\r\n}))\r\n\r\nexport default function WeeklyWorklogs() {\r\n    const classes = useStyles()\r\n    const [fromDate, setFromDate] = useState<string>(moment().weekday(0).format(dayWiseWorkLogDateFormat));\r\n    const [toDate, setToDate] = useState<string>(moment().weekday(6).format(dayWiseWorkLogDateFormat));\r\n    const [weekly, setWeekly] = useState<boolean>(true)\r\n    const subHeader = `From ${fromDate} to ${toDate}`\r\n    const datesForWhichWorkLogsLoaded = useAppSelector(state => state.workLog.datesForWhichWorkLogsLoaded);\r\n    const dispatch = useAppDispatch()\r\n\r\n    const allDates = getAllDatesWithinRange(fromDate, toDate)\r\n\r\n    useEffect(() => {\r\n        allDates.forEach(date => {\r\n            if (datesForWhichWorkLogsLoaded.indexOf(date) < 0) {\r\n                dispatch(loadWorkLogsByDate(moment(date).toDate()));\r\n            }\r\n        })\r\n    }, [dispatch, fromDate, toDate]);\r\n\r\n    return <Card >\r\n        <CardHeader\r\n            action={<SummaryMenu onChangeDate={(from, to) => {setFromDate(from); setToDate(to)}} setWeekly={setWeekly} fromDate={fromDate} toDate={toDate}/>}\r\n            title=\"Summary\"\r\n            subheader={subHeader}\r\n        />\r\n        <CardContent>\r\n        <TableContainer>\r\n            <Table size=\"small\" aria-label=\"a dense table\" style={{minWidth: 400}}>\r\n                <TableHead className={classes.head}>\r\n                    <TableRow>\r\n                        <TableCell className={classes.headCell}>Date</TableCell>\r\n                        <TableCell className={classes.headCell} align=\"right\">Submitted</TableCell>\r\n                        <TableCell className={classes.headCell} align=\"right\">Pending</TableCell>\r\n                        <TableCell className={classes.headCell} align=\"right\">Total</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <WorklogSummaryRow fromDate={fromDate} toDate={toDate} cellStyle={{fontWeight: \"bold\"}} rowStyle={{backgroundColor: \"beige\"}}/>\r\n                {\r\n                    allDates.map(date => <WorklogSummaryRow key={date} fromDate={date} />)\r\n                }\r\n            </Table>\r\n            </TableContainer>\r\n        </CardContent>\r\n    </Card >\r\n}","import { useEffect } from 'react';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport 'react-splitter-layout/lib/index.css';\r\nimport { useAppDispatch } from '../../hooks/storeHooks';\r\nimport { actions } from '../../store/actions';\r\nimport { DayWiseWorkLog } from './DayWiseWorkLog';\r\nimport WeeklyWorklogs from './WeeklyWorklogs';\r\n\r\nexport function WorkLog() {\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    dispatch(actions.mainMenu.setHeaderTitle(\"Work Log\"))\r\n    console.log(\"Use Effect\")\r\n  }, [dispatch])\r\n  console.log(\"Normal Load\")\r\n  return (\r\n    <SplitterLayout percentage={true} vertical={false} secondaryInitialSize={25}>\r\n      <div style={{padding: 10}}>\r\n        <DayWiseWorkLog />\r\n      </div>\r\n      <SplitterLayout percentage={true} vertical={true} secondaryInitialSize={30}>\r\n        <div style={{padding: 10}}>\r\n          <WeeklyWorklogs />\r\n        </div>\r\n        <div />\r\n      </SplitterLayout>\r\n    </SplitterLayout>\r\n  );\r\n}\r\n","import { Button, Card, Grid, TextField } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/storeHooks\";\r\nimport StaticServices from \"../../services\";\r\nimport { actions } from \"../../store/actions\";\r\nimport { saveJiraDomainUrl } from \"../../store/thunks/settingsThunks\";\r\n\r\nfunction WorkLog() {\r\n    const dispatch = useAppDispatch();\r\n    const jiraDomainUrl = useAppSelector(state => state.settings.jiraDomainUrl)\r\n    const [jiraUrl, setJiraUrl] = useState<string>(jiraDomainUrl)\r\n    const location = useLocation<any>();\r\n    useEffect(() => {\r\n        dispatch(actions.mainMenu.setHeaderTitle(\"Settings\"))\r\n    }, [dispatch])\r\n    useEffect(() => {\r\n        setJiraUrl(jiraUrl)\r\n    }, [jiraDomainUrl]);\r\n\r\n    const saveJiraSetup = () => {\r\n        if (jiraDomainUrl !== jiraUrl) {\r\n            StaticServices.JiraRestApiService.setJiraDomainUrl(jiraUrl)\r\n            StaticServices.JiraRestApiService.fetchCurrentUser()\r\n                .then(res => {\r\n                    if (res.email) {\r\n                        dispatch(saveJiraDomainUrl(jiraUrl))\r\n                            .then(r => StaticServices.JiraRestApiService.setJiraCurrentUser(res.email))\r\n                    }\r\n                }).catch(err => {\r\n                    StaticServices.JiraRestApiService.setJiraDomainUrl(jiraDomainUrl)\r\n                })\r\n        }\r\n    }\r\n    return (\r\n        <Card style={{ padding: 10 }}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        label=\"Jira Domain Url\"\r\n                        value={jiraUrl}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => setJiraUrl(e.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={6}>{location.state && location.state.errorConnect && <Alert severity=\"error\">Unable to connect to Jira URL. Probably you have logged out from Jira (re-login to Jira and reload this page) or the provide a working Jira url.</Alert>}</Grid>\r\n                <Grid item xs={6} style={{marginTop: 10}}>\r\n                    <Button fullWidth onClick={() => saveJiraSetup()} variant=\"contained\" color=\"primary\">Save</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default WorkLog;\r\n","import { Grid, IconButton, TextField } from \"@material-ui/core\"\r\nimport { JiraWorkLogInt } from \"../../types\"\r\nimport { convertJiraCommentToText } from \"../../utils/jiraUtils\";\r\nimport lodash from 'lodash'\r\nimport StaticServices from \"../../services\";\r\nimport { useStore } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/storeHooks\";\r\nimport { loadWorkLogsByDate } from \"../../store/thunks/workLogThunks\";\r\nimport { areSameDate, dayWiseWorkLogDateFormat, JiraDateTimeFormat } from \"../../utils/dateUtils\";\r\nimport { FileCopy } from \"@material-ui/icons\";\r\n\r\nfunction processWorkLogForScum(workLog: JiraWorkLogInt, issue?: any) {\r\n    let comment = convertJiraCommentToText(workLog.comment)\r\n    let probableMyIssue = (lodash.get(issue, \"customfield_10901.emailAddress\", StaticServices.JiraRestApiService.getJiraCurrentUser()) as unknown as string) === StaticServices.JiraRestApiService.getJiraCurrentUser()\r\n    let isCommon = [\"scrum\", \"status update\", \"weekly\", \"leave\"].filter(r => comment.toLowerCase().indexOf(r) >= 0).length > 0\r\n    let isReview = [\"review code\", \"review of\"].filter(r => comment.toLowerCase().indexOf(r) >= 0).length > 0\r\n    let isImplementation = ([\"implement\", \"fix\", \"develop\"].filter(r => comment.toLowerCase().indexOf(r) >= 0).length > 0) && probableMyIssue\r\n    let isComplete = [\"complete\"].filter(r => comment.toLowerCase().indexOf(r) >= 0).length > 0\r\n    let isAnalysis = ([\"analysis\", \"report\"].filter(r => comment.toLowerCase().indexOf(r) >= 0).length > 0) && probableMyIssue\r\n    let isDiscussion = [\"discussion\", \"meeting\"].filter(r => comment.toLowerCase().indexOf(r) >= 0).length > 0\r\n    if(isCommon) {\r\n        comment = \"\"\r\n    } else if (isReview || isComplete) {\r\n        comment = workLog.issueKey + \": \" + comment\r\n    } else if (isImplementation) {\r\n        comment = workLog.issueKey + \": Implementation - \" + comment\r\n    } else if (isAnalysis) {\r\n        comment = workLog.issueKey + \": Analysis - \" + comment\r\n    } else if (isDiscussion && workLog.timeSpentSeconds >= (30*60)) {\r\n        comment = workLog.issueKey + \": Communication - \" + comment\r\n    } else {\r\n        comment = \"\"\r\n    }\r\n    return comment.split(\"\\n\").join(\" \")\r\n}\r\n\r\nexport default function ScrumGenerator() {\r\n    const currentDate = moment().format(dayWiseWorkLogDateFormat);\r\n    const previousDay = moment().subtract(1, \"day\").format(dayWiseWorkLogDateFormat);\r\n    const dispatch = useAppDispatch();\r\n    const datesForWhichWorkLogsLoaded = useAppSelector(state => state.workLog.datesForWhichWorkLogsLoaded);\r\n    const workLogs = useAppSelector(state => state.workLog.submittedWorkLogs);\r\n    const pendingWorkLogs = useAppSelector(state => state.workLog.pendingWorkLog);\r\n    const [worked, setWorked] = useState<string>(\"N/A\")\r\n    const [plan, setPlan] = useState<string>(\"N/A\")\r\n    useEffect(() => {\r\n        if(datesForWhichWorkLogsLoaded.indexOf(previousDay) < 0) {\r\n            dispatch(loadWorkLogsByDate(moment(previousDay).toDate()));\r\n        } else {\r\n            let comments = workLogs\r\n                .filter(r => areSameDate(moment(previousDay, dayWiseWorkLogDateFormat).toDate(), moment(r.started, JiraDateTimeFormat).toDate(), dayWiseWorkLogDateFormat))\r\n                .map(r => processWorkLogForScum(r))\r\n                .filter(r => !!r)\r\n                .join(\"\\n\")\r\n            setWorked(comments? comments: \"N/A\");\r\n        }\r\n    }, [datesForWhichWorkLogsLoaded, dispatch, previousDay, workLogs]);\r\n\r\n    useEffect(() => {\r\n        let comments = pendingWorkLogs\r\n                .filter(r => areSameDate(moment(currentDate, dayWiseWorkLogDateFormat).toDate(), moment(r.started, JiraDateTimeFormat).toDate(), dayWiseWorkLogDateFormat))\r\n                .map(r => processWorkLogForScum(r))\r\n                .filter(r => !!r)\r\n                .join(\"\\n\")\r\n            setPlan(comments? comments: \"N/A\");\r\n    }, [pendingWorkLogs])\r\n\r\n    return <Grid container style={{padding: 10, marginTop: 30}} justify=\"center\">\r\n        <Grid item xs={5}>\r\n            <TextField\r\n                label=\"Worked on Yesterday\"\r\n                fullWidth\r\n                rows={10}\r\n                multiline\r\n                variant=\"outlined\"\r\n                value={worked}\r\n                onChange={e => setWorked(e.target.value)}\r\n                InputProps={{\r\n                    endAdornment: (\r\n                        <IconButton onClick={() => navigator.clipboard.writeText(worked)}>\r\n                            <FileCopy/>\r\n                        </IconButton>\r\n                    ),\r\n                }}\r\n            />\r\n        </Grid>\r\n        <Grid item xs={1}></Grid>\r\n        <Grid item xs={5}>\r\n            <TextField\r\n                label=\"Plan for Today\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                rows={10}\r\n                multiline\r\n                value={plan}\r\n                onChange={e => setPlan(e.target.value)}\r\n                InputProps={{\r\n                    endAdornment: (\r\n                        <IconButton onClick={() => navigator.clipboard.writeText(plan)}>\r\n                            <FileCopy/>\r\n                        </IconButton>\r\n                    ),\r\n                }}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}","import React, { Fragment, useEffect } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/storeHooks\";\r\nimport { deleteNote, loadNotes } from \"../../store/thunks/workLogThunks\";\r\nimport EnhancedTable from \"../BasicComponents/EnhancedTable\";\r\nimport lodash from 'lodash'\r\nimport { Avatar, Grid } from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport JiraTimeView from \"../BasicComponents/JiraTimeView\";\r\nimport { JiraUserPickerInt } from \"../../types\";\r\nimport { Delete } from \"@material-ui/icons\";\r\n\r\nexport default function NoteList() {\r\n    const notes = useAppSelector(s => s.workLog.notes)\r\n    const dispatch = useAppDispatch()\r\n    useEffect(() => {\r\n        if (!notes.length) {\r\n            dispatch(loadNotes())\r\n        }\r\n    }, [])\r\n    return <EnhancedTable\r\n        headerTitle=\"Notes\"\r\n        data={notes}\r\n        getRowKey={(r) => r.id}\r\n        selection={{\r\n            mode: \"multiple\",\r\n            by: \"checkbox\",\r\n            actions: [\r\n                {\r\n                    toolTipText: () => \"Delete\",\r\n                    renderIcon: () => <Delete />,\r\n                    disabled: (rows) => rows.length === 0,\r\n                    onClick: (rows) => rows.forEach(r => dispatch(deleteNote(r.id)))\r\n                },\r\n            ]\r\n        }}\r\n        columns={[\r\n            { id: \"createAt\", numeric: false, disablePadding: false, align: \"left\", label: \"Created\", renderColumn: (row) => moment(row.createAt).format(\"DD/MM/YYYY HH:mm\")}, \r\n            { id: \"issueKey\", numeric: false, disablePadding: false, align: \"left\", label: \"Issue\" }, \r\n            {\r\n                id: \"forUser\", numeric: false, disablePadding: false, label: 'Person', align: \"left\",\r\n                comparator: (op, a, b, def) => {\r\n                    return def(op, (a as JiraUserPickerInt)?.displayName, b)\r\n                },\r\n                descendingComparator: (a: any, b: any) => {\r\n                    const nameA = lodash.get(a, 'displayName', \"\")\r\n                    const nameB = lodash.get(b, 'displayName', \"\")\r\n                    return nameA > nameB ? -1 : (nameA === nameB ? 0 : 1)\r\n                },\r\n                renderColumn: row => <Grid container>\r\n                    <Grid xs={2}><Avatar style={{height: 20, width: 20}} src={row.forUser?.avatarUrl} /></Grid>\r\n                    <Grid xs={10}>{row.forUser?.displayName}</Grid>\r\n                </Grid>\r\n            },\r\n            { id: \"type\", numeric: false, disablePadding: false, label: 'Type', align: \"left\" },\r\n            { id: \"rating\", numeric: true, disablePadding: false, label: 'Rating', align: \"left\" },\r\n            { id: \"spentTime\", numeric: true, disablePadding: false, label: 'Spent', align: \"left\", renderColumn: (row) => row.spentTime && <JiraTimeView timeSpendInSeconds={row.spentTime} />},\r\n            {\r\n                id: \"details\", numeric: false, disablePadding: false, label: 'Details', align: \"left\", disableSorting: true\r\n            },\r\n        ]}\r\n        sorting={{\r\n            defaultSortingOrder: \"asc\"\r\n        }}\r\n    />\r\n}","import SettingsDao, { SettingsDaoDataInt } from \"./dao/settingsDao\"\r\nimport WorkLogDao, { WorkLogDaoDataInt } from \"./dao/workLogDao\"\r\n\r\nconst workLogDao = new WorkLogDao()\r\nconst settingDao = new SettingsDao()\r\n\r\ninterface BackupDataInt {\r\n    workLogDao: WorkLogDaoDataInt,\r\n    settingsDao: SettingsDaoDataInt\r\n}\r\n\r\nexport default class StorageBackupService {\r\n    static exportDatabase = async (): Promise<BackupDataInt> => {\r\n        return {\r\n            workLogDao: await workLogDao.exportData(),\r\n            settingsDao: await settingDao.exportData()\r\n        }\r\n    }\r\n    static importDatabase = async (req: any) => {\r\n        const data = req as BackupDataInt\r\n        if(data) {\r\n            await workLogDao.importData(data.workLogDao)\r\n            await settingDao.importData(data.settingsDao)\r\n        }\r\n    }\r\n}","import { Button, Grid } from \"@material-ui/core\";\r\nimport React, { useRef } from \"react\";\r\nimport StorageBackupService from \"../../services/storage/backupService\";\r\n\r\nexport default function Backup() {\r\n    const fileRef = useRef<HTMLInputElement>(null)\r\n    const importClicked = () => {\r\n        fileRef.current?.click()\r\n    }\r\n    const importFile = (files: FileList|null) => {\r\n        if(files && files.length > 0) {\r\n            const reader = new FileReader()\r\n            reader.onload = function () {\r\n                if(typeof reader.result == 'string') {\r\n                    StorageBackupService.importDatabase(JSON.parse(reader.result))\r\n                        .then(() => document.location.reload())\r\n                }\r\n            }\r\n            reader.readAsText(files[0])\r\n        }\r\n    }\r\n\r\n    const exportFile = () => {\r\n        StorageBackupService.exportDatabase()\r\n            .then(data => downloadPrompt(data))\r\n    }\r\n\r\n    const downloadPrompt = (data: any) => {\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([JSON.stringify(data)], {type: 'application/json'});\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"dev-assistant-backup.json\";\r\n        document.body.appendChild(element); // Required for this to work in FireFox\r\n        element.click();\r\n    }\r\n    return <Grid container style={{textAlign: \"center\", padding: 50}}>\r\n        <Grid item xs={12}>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => importClicked()}\r\n            >\r\n                Import\r\n            </Button>\r\n            <Button\r\n                style={{marginLeft: 10}}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => exportFile()}\r\n            >\r\n                Export\r\n            </Button>\r\n            <input type=\"file\" accept=\"application/json\" ref={fileRef} style={{display: 'none'}} onChange={(e) => importFile(e.target.files)}/>\r\n        </Grid>\r\n    </Grid>\r\n}","import { Route, Switch } from \"react-router-dom\";\r\nimport { WorkLog } from \"../WorkLog\"\r\nimport Settings from \"../Settings\"\r\nimport ScrumGenerator from \"../Reports/ScrumGenerator\";\r\nimport React from \"react\";\r\nimport NoteList from \"../Notes/NoteList\";\r\nimport Backup from \"../Backup\";\r\nexport default function MainMenuContent() {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/work-log\">\r\n                <WorkLog />\r\n            </Route>\r\n            <Route path=\"/scrum\">\r\n                <ScrumGenerator />\r\n            </Route>\r\n            <Route path=\"/notes\">\r\n                <NoteList />\r\n            </Route>\r\n            <Route path=\"/settings\">\r\n                <Settings />\r\n            </Route>\r\n            <Route path=\"/backup\">\r\n                <Backup />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Header from \"./Header\"\r\nimport MenuDrawer from './MenuDrawer';\r\nimport MainMenuContent from './MainMenuContent';\r\nimport { Backdrop } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/storeHooks';\r\nimport { loadSettings } from '../../store/thunks/settingsThunks';\r\nimport { loadPendingWorkLogs } from '../../store/thunks/workLogThunks';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: 'hidden',\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      height: `calc(100vh - ${theme.mixins.toolbar.minHeight}px - ${theme.spacing(1)}px)`,\r\n      marginTop: `calc(${theme.mixins.toolbar.minHeight}px + ${theme.spacing(1)}px)`,\r\n      position: \"relative\"\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function MainMenu() {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch()\r\n  const history = useHistory()\r\n  const [loading, setLoading] = useState<boolean>(true)\r\n  const jiraDomainUrl = useAppSelector(state => state.settings.jiraDomainUrl)\r\n\r\n  useEffect(() => {\r\n    dispatch(loadSettings())\r\n      .then(() => setLoading(false))\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      if (jiraDomainUrl) {\r\n        dispatch(loadPendingWorkLogs())\r\n          .then(() => history.push(\"/work-log\"))\r\n      } else {\r\n        history.push({ pathname: \"/settings\", state: {errorConnect: true}})\r\n      }\r\n    }\r\n  }, [jiraDomainUrl, loading])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <Header />\r\n      <MenuDrawer />\r\n      {!loading && <main className={classes.content}>\r\n        <MainMenuContent />\r\n      </main>}\r\n      <Backdrop open={loading}/>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport {\n  HashRouter as Router\n} from \"react-router-dom\";\nimport MainMenu from \"./Components/MainMenu/index\";\n\nfunction App() {\n  return (\n    <Router>\n      <MainMenu />\n    </Router>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport mainMenuSlice from \"./slices/mainMenuSlice\";\r\nimport settingsSlice from './slices/settingsSlice';\r\nimport workLogSlice from './slices/workLogSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    mainMenu: mainMenuSlice,\r\n    workLog: workLogSlice,\r\n    settings: settingsSlice\r\n  },\r\n  middleware: getDefaultMiddleware()\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { JiraCommentInt, JiraCommentNodeInt } from \"../types\";\r\n\r\nconst allowedTimeUnit: any = {\r\n    \"h\": 60 * 60,\r\n    \"m\": 60\r\n}\r\n\r\nexport function convertJiraCommentToText(jiraComment: JiraCommentInt) {\r\n    return convertJiraNodeToText(jiraComment)\r\n}\r\n\r\nexport function convertTextToJiraComment(text: string): JiraCommentInt {\r\n    return {\r\n        version: 1,\r\n        type: \"doc\",\r\n        content: [\r\n            {\r\n                type: \"paragraph\",\r\n                content: [{\r\n                    type: \"text\",\r\n                    text: text\r\n                }]\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\nfunction convertJiraNodeToText(node: JiraCommentNodeInt) {\r\n    let comment = \"\";\r\n    if (node.text) {\r\n        comment = node.text;\r\n    }\r\n    if (node.content) {\r\n        node.content.forEach(child => comment += convertJiraNodeToText(child))\r\n    }\r\n    return comment;\r\n}\r\n\r\nexport function convertTimeInSecondToJiraTimeFormat(timeInSecond: number, roundSeconds?: boolean): {\r\n    text: string,\r\n    seconds: number\r\n} {\r\n    const seconds = timeInSecond % 60;\r\n    let minutes = Math.floor(timeInSecond / 60);\r\n    if (seconds && roundSeconds) {\r\n        minutes++;\r\n    }\r\n    let hours = Math.floor(minutes / 60);\r\n    minutes = minutes % 60;\r\n\r\n    const strList: string[] = [];\r\n    if (hours > 0) {\r\n        strList.push(`${hours}h`);\r\n    }\r\n    if (minutes > 0) {\r\n        strList.push(`${minutes}m`);\r\n    }\r\n    return {\r\n        text: strList.join(\" \"),\r\n        seconds: (roundSeconds && seconds) ? (seconds - 60) : seconds\r\n    };\r\n}\r\n\r\nexport function roundTimeInSeconds(timeInSecond: number) {\r\n    const res =  convertTimeInSecondToJiraTimeFormat(timeInSecond, true)\r\n    return timeInSecond - res.seconds\r\n}\r\n\r\nexport function addRemainingSecondsToRound(timeInSecond: number) {\r\n    const seconds = timeInSecond % 60\r\n    return timeInSecond + (seconds ? (60 - seconds) : 0)\r\n}\r\n\r\nexport function convertJiraTimeFormatToSeconds(text: string): number {\r\n    let seconds = 0.0;\r\n    if (text) {\r\n        let set = new Set<string>();\r\n        text.split(\" \")\r\n            .map(t => t.trim().toLocaleLowerCase())\r\n            .filter(t => t.length > 0)\r\n            .forEach(t => {\r\n                if (seconds !== -1) {\r\n                    let match = t.match(\"[0-9.]+[hm]?\")\r\n                    if (match && match[0].length === t.length) {\r\n                        let unit = t[t.length - 1];\r\n                        let unitInSecond = allowedTimeUnit[unit];\r\n                        if (!unitInSecond) {\r\n                            unit = 'm';\r\n                            unitInSecond = allowedTimeUnit['m']\r\n                        }\r\n                        if (set.has(unit)) {\r\n                            seconds = -1;\r\n                        } else {\r\n                            set.add(unit);\r\n                            seconds += unitInSecond * (Number.parseFloat(t))\r\n                        }\r\n                    } else {\r\n                        seconds = -1;\r\n                    }\r\n                } else {\r\n                    seconds = -1;\r\n                }\r\n            })\r\n    }\r\n\r\n    return seconds === -1 ? Math.ceil(seconds) : seconds;\r\n}","import fetch from 'node-fetch';\r\nexport default class HttpService {\r\n\r\n    static proxy = async (url: string, method: \"GET\"|\"POST\"|\"PUT\", headers: any, bodyData: any, expectJson: boolean) => {\r\n        const res = await fetch(\"http://localhost:8080/proxy\", {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                url,\r\n                method,\r\n                headers,\r\n                bodyData\r\n            })\r\n        });\r\n        return expectJson ? await res.json() : await res.text();\r\n    }\r\n\r\n    static get = async (url: string, headers: any, expectJson: boolean) => {\r\n        if(process.env.NODE_ENV === \"development\") {\r\n            return await HttpService.proxy(url, \"GET\", headers, undefined, expectJson)\r\n        }\r\n        const res = await fetch(url, {\r\n            method: 'GET',\r\n            headers\r\n        });\r\n        return expectJson ? await res.json() : await res.text();\r\n    }\r\n    static post = async (url: string, headers: any, bodyData: any, expectJson: boolean) => {\r\n        if(process.env.NODE_ENV === \"development\") {\r\n            return await HttpService.proxy(url, \"POST\", headers, bodyData, expectJson)\r\n        }\r\n        const res = await fetch(url, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(bodyData)\r\n        });\r\n        return expectJson ? await res.json() : await res.text();\r\n    }\r\n    static put = async (url: string, headers: any, bodyData: any, expectJson: boolean) => {\r\n        if(process.env.NODE_ENV === \"development\") {\r\n            return await HttpService.proxy(url, \"PUT\", headers, bodyData, expectJson)\r\n        }\r\n        const res = await fetch(url, {\r\n            method: 'PUT',\r\n            headers,\r\n            body: JSON.stringify(bodyData)\r\n        });\r\n        return expectJson ? await res.json() : await res.text();\r\n    }\r\n}","import moment from \"moment\";\r\n\r\nexport const JiraDateTimeFormat = 'YYYY-MM-DDTHH:mm:ss.SSSZZ';\r\nexport const dayWiseWorkLogDateFormat = \"YYYY-MM-DD\";\r\nexport const UiDateTimeLocalFormat = \"YYYY-MM-DDTHH:mm\";\r\nexport const TimeFormatForView = \"hh:mm A\";\r\n\r\nexport function areSameDate(date1: Date, date2: Date, format: string = JiraDateTimeFormat) {\r\n    return moment(date1).format(format) === moment(date2).format(format)\r\n}\r\n\r\nexport function getAllDatesWithinRange(fromDate: string, toDate: string) {\r\n    const allDates = [];\r\n    let currentDate = moment(fromDate);\r\n    while(currentDate.isSameOrBefore(toDate)) {\r\n        allDates.push(currentDate.format(dayWiseWorkLogDateFormat))\r\n        currentDate = currentDate.add(1, \"day\")\r\n    }\r\n    return allDates\r\n}"],"sourceRoot":""}