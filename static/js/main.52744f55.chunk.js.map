{"version":3,"sources":["components/Disk.js","components/Cell.js","components/Board.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Disk","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","diskType","selected","forceJump","background","react_default","a","createElement","style","width","height","padding","borderRadius","margin","display","visibility","lineHeight","boxShadow","React","Component","Cell","handleCellClick","cell","moveStarted","finishMove","currentTurn","forceJumpList","type","possibleMove","x","y","length","filter","c","moveStart","_this$props2","cellType","forceJumpDisk","onClick","Disk_Disk","abs","Board","componentDidMount","initialBoardConfiguration","componentWillReceiveProps","newProps","restartFinished","restartRequired","place12DisksOnBoard","gridMap","end","inc","getCellType","setState","selectedCellList","possibleMoveList","_this$state","forEach","jumpList","findPossibleJump","findPossibleMove","_this$state2","setWinner","lastSelectedPosition","clearPossibleMoves","clearSelectedList","middleCell","isJumpMove","forceJumpObject","allPossibleJumpMoveListForCurrentPlayer","moveList","allPossibleMoveListForCurrentPlayer","objectSpread","push","pos1","pos2","arguments","undefined","validCell","possibleJumpList","opponentType","generateCells","_this$state3","renderCells","Cell_Cell","key","cursor","Header","restartGame","winner","textAlign","className","App","window","confirm","Header_Header","Board_Board","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52744f55.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Disk extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {diskType, selected, forceJump} = this.props;\r\n        const background = diskType === 'r' ? '#a5320b': 'black';\r\n        return (\r\n            <span style={{ \r\n                width: '70px', \r\n                height: '70px', \r\n                padding: '0', \r\n                borderRadius:'50%',\r\n                margin: 0, \r\n                background: background, \r\n                display: 'inline-block', \r\n                visibility: diskType === 'e' ?'hidden': 'visible', \r\n                lineHeight:0, \r\n                boxShadow: '1px 1px 5px ' + (selected ? '#35d650': (forceJump ? '#efef51':'white'))\r\n             }}\r\n                ></span>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Disk from './Disk';\r\n\r\nexport default class Cell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: false\r\n        };\r\n    }\r\n\r\n    handleCellClick = () => {\r\n        const { cell, moveStarted, finishMove, currentTurn, forceJump, forceJumpList } = this.props;\r\n        if (cell.type === 'r') {\r\n            return;\r\n        }\r\n        if (moveStarted && cell.possibleMove) {\r\n            finishMove(cell.x, cell.y);\r\n            return;\r\n        }\r\n        if (currentTurn !== cell.diskType) {\r\n            return;\r\n        }\r\n        if (forceJump\r\n            && forceJumpList\r\n            && forceJumpList.length\r\n            && forceJumpList\r\n                .filter(c => c.x === cell.x && c.y === cell.y)\r\n                .length === 0) {\r\n            return;\r\n        }\r\n        this.props.moveStart(cell.x, cell.y);\r\n    }\r\n\r\n    render() {\r\n        const { cell, forceJump, forceJumpList } = this.props;\r\n        const background = cell.possibleMove ? '#35d650' : (cell.cellType === 'r' ? '#b76464' : '#4c4a4a');\r\n        const forceJumpDisk = forceJump && forceJumpList.filter(c => c.x === cell.x && c.y === cell.y).length > 0;\r\n        return (\r\n            <div\r\n                onClick={cell.cellType === 'r' ? () => { } : this.handleCellClick}\r\n                style={{ width: '70px', height: '70px', padding: '5px', margin: 0, background: background, display: 'inline-block', lineHeight: 0 }}>\r\n                <Disk selected={cell.selected} diskType={cell.diskType} forceJump={forceJumpDisk} /></div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nvar abs = (a) => {\r\n    return a>0 ? a :-a;\r\n}\r\n\r\nexport default class Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let gridMap = [];\r\n\r\n        for (let x = 1; x <= 8; x++) {\r\n            gridMap[x] = {};\r\n            for (let y = 1; y <= 8; y++) {\r\n                gridMap[x][y] = {\r\n                    x,\r\n                    y,\r\n                    cellType: this.getCellType(x, y),\r\n                    diskType: 'e'\r\n                };\r\n            }\r\n        }\r\n        this.state = {\r\n            gridMap,\r\n            currentTurn: 'b',\r\n            selectedCellList: [],\r\n            possibleMoveList: [],\r\n            moveStarted: false,\r\n            forceJump: false,\r\n            forceJumpList: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const {finishMove} = this.props;\r\n        this.initialBoardConfiguration();\r\n        finishMove('b');\r\n    }\r\n\r\n    componentWillReceiveProps = (newProps) => {\r\n        const {restartFinished} = this.props;\r\n        if(newProps.restartRequired === true) {\r\n            this.initialBoardConfiguration();\r\n            restartFinished();\r\n        }\r\n    }\r\n\r\n    place12DisksOnBoard = (gridMap, diskType) => {\r\n        const start = diskType === 'r' ? 1 : 8;\r\n        const end = diskType === 'r' ? 4 : 5;\r\n        const inc = diskType === 'r' ? 1 : -1;\r\n        for (let x = start; x !== end; x += inc) {\r\n            for (let y = 1; y <= 8; y++) {\r\n                let cell = gridMap[x][y];\r\n                if (cell.cellType === 'r') {\r\n                    continue;\r\n                }\r\n                cell.diskType = diskType;\r\n            }\r\n        }\r\n    }\r\n\r\n    initialBoardConfiguration = () => {\r\n        const { gridMap } = this.state;\r\n        for (let x = 1; x <= 8; x++) {\r\n            for (let y = 1; y <= 8; y++) {\r\n                gridMap[x][y] = {\r\n                    x,\r\n                    y,\r\n                    cellType: this.getCellType(x, y),\r\n                    diskType: 'e'\r\n                };\r\n            }\r\n        }\r\n        this.place12DisksOnBoard(gridMap, 'r');\r\n        this.place12DisksOnBoard(gridMap, 'b');\r\n        this.setState({\r\n            gridMap,\r\n            currentTurn: 'b',\r\n            selectedCellList: [],\r\n            possibleMoveList: [],\r\n            moveStarted: false,\r\n            forceJump: false,\r\n            forceJumpList: [],\r\n        });\r\n    }\r\n\r\n    moveStart = (x, y) => {\r\n        const { gridMap, selectedCellList } = this.state;\r\n        selectedCellList.forEach(cell => {\r\n            gridMap[cell.x][cell.y].selected = false;\r\n        });\r\n        gridMap[x][y].selected = true;\r\n        const jumpList = this.findPossibleJump(gridMap, x, y);\r\n        const possibleMoveList = jumpList && jumpList.length ? jumpList : this.findPossibleMove(gridMap, x, y);\r\n        this.state.possibleMoveList.forEach(cell => {\r\n            gridMap[cell.x][cell.y].possibleMove = false;\r\n        });\r\n        possibleMoveList.forEach(cell => {\r\n            gridMap[cell.x][cell.y].possibleMove = true;\r\n        });\r\n        this.setState({\r\n            gridMap,\r\n            selectedCellList: [{ x, y }],\r\n            possibleMoveList,\r\n            moveStarted: true\r\n        });\r\n    }\r\n\r\n    finishMove = (x, y) => {\r\n        const { gridMap, selectedCellList, possibleMoveList, currentTurn } = this.state;\r\n        const {setWinner, finishMove} = this.props;\r\n        const lastSelectedPosition = selectedCellList[0];\r\n        gridMap[x][y].diskType = gridMap[lastSelectedPosition.x][lastSelectedPosition.y].diskType;\r\n        gridMap[lastSelectedPosition.x][lastSelectedPosition.y].diskType = 'e';\r\n        this.clearPossibleMoves(gridMap, possibleMoveList);\r\n        this.clearSelectedList(gridMap, selectedCellList);\r\n        let middleCell = this.isJumpMove(lastSelectedPosition, {x,y});\r\n        if (middleCell) {\r\n            gridMap[middleCell.x][middleCell.y].diskType = 'e';\r\n        }\r\n        const jumpList = this.findPossibleJump(gridMap, x, y);\r\n        let forceJumpObject = {};\r\n        if(middleCell && jumpList && jumpList.length) {\r\n            forceJumpObject = {\r\n                possibleMoveList: jumpList,\r\n                forceJump: true,\r\n                moveStarted: true,\r\n                currentTurn: currentTurn,\r\n                selectedCellList: [{x,y}],\r\n                forceJumpList: [{x,y}]\r\n            };\r\n            jumpList.forEach(cell => {\r\n                gridMap[cell.x][cell.y].possibleMove = true;\r\n            });\r\n            gridMap[x][y].selected = true;\r\n        } else {\r\n            const forceJumpList = this.allPossibleJumpMoveListForCurrentPlayer(gridMap, currentTurn === 'b' ? 'r' : 'b');\r\n            const moveList = this.allPossibleMoveListForCurrentPlayer(gridMap, currentTurn === 'b' ? 'r' : 'b');\r\n            if(forceJumpList.length) {\r\n                forceJumpObject = {\r\n                    forceJump: true,\r\n                    forceJumpList\r\n                };\r\n                finishMove(currentTurn === 'b' ? 'r' : 'b');\r\n            } else if(moveList.length === 0) {\r\n                setWinner(currentTurn);\r\n            } else {\r\n                finishMove(currentTurn === 'b' ? 'r' : 'b');\r\n            }\r\n        }\r\n        this.setState({\r\n            gridMap,\r\n            selectedCellList: [],\r\n            possibleMoveList: [],\r\n            forceJumpList: [],\r\n            moveStarted: false,\r\n            forceJump: false,\r\n            currentTurn: currentTurn === 'b' ? 'r' : 'b',\r\n            ...forceJumpObject\r\n        });\r\n    }\r\n\r\n    allPossibleJumpMoveListForCurrentPlayer = (gridMap, currentTurn) => {\r\n        let forceJumpDisk = [];\r\n        for (let x = 1; x <= 8; x++) {\r\n            for (let y = 1; y <= 8; y++) {\r\n                const cell = gridMap[x][y];\r\n                if(cell.diskType === currentTurn && this.findPossibleJump(gridMap, x, y).length) {\r\n                    forceJumpDisk.push({x,y});\r\n                }\r\n            }\r\n        }\r\n        return forceJumpDisk;\r\n    }\r\n\r\n    allPossibleMoveListForCurrentPlayer = (gridMap, currentTurn) => {\r\n        let moveList = [];\r\n        for (let x = 1; x <= 8; x++) {\r\n            for (let y = 1; y <= 8; y++) {\r\n                const cell = gridMap[x][y];\r\n                if(cell.diskType === currentTurn && this.findPossibleMove(gridMap, x, y).length) {\r\n                    moveList.push({x,y});\r\n                }\r\n            }\r\n        }\r\n        return moveList;\r\n    }\r\n\r\n    isJumpMove = (pos1, pos2) => {\r\n        if (abs(pos1.x - pos2.x) === 2) {\r\n            return { x: (pos1.x + pos2.x) / 2, y: (pos1.y + pos2.y) / 2 };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    clearPossibleMoves = (gridMap, possibleMoveList = []) => {\r\n        possibleMoveList.forEach(cell => {\r\n            gridMap[cell.x][cell.y].possibleMove = false;\r\n        });\r\n        return gridMap;\r\n    }\r\n\r\n    clearSelectedList = (gridMap, selectedCellList = []) => {\r\n        selectedCellList.forEach(cell => {\r\n            gridMap[cell.x][cell.y].selected = false;\r\n        });\r\n        return gridMap;\r\n    }\r\n\r\n    findPossibleMove = (gridMap, x, y) => {\r\n        const possibleMoveList = [];\r\n        const cell = gridMap[x][y];\r\n        const inc = cell.diskType === 'r' ? 1 : -1;\r\n        if (this.validCell(x + inc, y + 1) && gridMap[x + inc][y + 1].diskType === 'e') {\r\n            possibleMoveList.push({ x: x + inc, y: y + 1 });\r\n        }\r\n        if (this.validCell(x + inc, y - 1) && gridMap[x + inc][y - 1].diskType === 'e') {\r\n            possibleMoveList.push({ x: x + inc, y: y - 1 });\r\n        }\r\n        return possibleMoveList;\r\n    }\r\n\r\n    findPossibleJump = (gridMap, x, y) => {\r\n        const possibleJumpList = [];\r\n        const cell = gridMap[x][y];\r\n        const opponentType = cell.diskType === 'r' ? 'b' : 'r';\r\n        const inc = cell.diskType === 'r' ? 1 : -1;\r\n        if (this.validCell(x + inc, y + 1) && gridMap[x + inc][y + 1].diskType === opponentType\r\n            && this.validCell(x + 2 * inc, y + 2) && gridMap[x + 2 * inc][y + 2].diskType === 'e'\r\n        ) {\r\n            possibleJumpList.push({ x: x + inc + inc, y: y + 2 });\r\n        }\r\n        if (this.validCell(x + inc, y - 1) && gridMap[x + inc][y - 1].diskType === opponentType\r\n            && this.validCell(x + 2 * inc, y - 2) && gridMap[x + 2 * inc][y - 2].diskType === 'e'\r\n        ) {\r\n            possibleJumpList.push({ x: x + inc + inc, y: y - 2 });\r\n        }\r\n        return possibleJumpList;\r\n    }\r\n\r\n    validCell = (x, y) => {\r\n        return x > 0 && x <= 8 && y > 0 && y <= 8;\r\n    }\r\n\r\n    getCellType = (x, y) => {\r\n        return x % 2 === y % 2 ? 'r' : 'b';\r\n    }\r\n\r\n    generateCells = () => {\r\n        const { gridMap, moveStarted, currentTurn, forceJumpList, forceJump } = this.state;\r\n        let renderCells = [];\r\n        for (let x = 1; x <= 8; x++) {\r\n            for (let y = 1; y <= 8; y++) {\r\n                const cell = gridMap[x][y];\r\n                renderCells.push(\r\n                    <Cell\r\n                        moveStart={this.moveStart}\r\n                        key={x * 8 + y}\r\n                        moveStarted={moveStarted}\r\n                        finishMove={this.finishMove}\r\n                        currentTurn={currentTurn}\r\n                        forceJump={forceJump}\r\n                        forceJumpList= {forceJumpList}\r\n                        cell={cell}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n        return renderCells;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                width: '640px', height: '640px', padding: '5px', margin: 0,\r\n                display: 'inline-block', lineHeight: '0', cursor: 'pointer'\r\n            }}>\r\n                {this.generateCells()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {restartGame, currentTurn, winner} = this.props;\r\n        return (\r\n            <div style={{ \r\n                width: '640px', \r\n                height: '50px', \r\n                padding: '5px', \r\n                margin: '0',\r\n                lineHeight: '50px',\r\n                textAlign: 'center'\r\n             }}\r\n                >\r\n                    <button className=\"restartButton\" onClick={restartGame}>{'Restart Game'}</button>\r\n                    <span className=\"message\"> {\r\n                        winner ? (winner === 'b' ? 'Black wins': 'Red wins')\r\n                        : (currentTurn ? (currentTurn === 'b' ? \"Black's turn\": \"Red's turn\") : '')\r\n                    }</span>\r\n                </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Board from \"./components/Board\";\r\nimport Header from \"./components/Header\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      restartRequired: false,\r\n      currentTurn: null,\r\n      winner: null\r\n    }\r\n  }\r\n\r\n  restartGame = () => {\r\n    const {winner} = this.state;\r\n    if(winner || window.confirm('Do you want to restart?')) {\r\n      this.setState({\r\n        restartRequired: true,\r\n        currentTurn: 'null',\r\n        winner: null\r\n      });\r\n    }\r\n  }\r\n\r\n  restartFinished = () => {\r\n    this.setState({\r\n      restartRequired: false,\r\n      currentTurn: 'b'\r\n    });\r\n  }\r\n\r\n  setWinner = (winner) => {\r\n    this.setState({\r\n      winner,\r\n      currentTurn: null\r\n    });\r\n  }\r\n\r\n  finishMove = (currentTurn) => {\r\n    this.setState({\r\n      currentTurn\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {restartRequired, winner, currentTurn} = this.state;\r\n    return (\r\n      <div className=\"App\" style={{ width: 650, margin: '10px auto' }}>\r\n        <Header restartGame={this.restartGame} winner={winner} currentTurn={currentTurn}/>\r\n        <Board restartRequired={restartRequired} restartFinished={this.restartFinished} setWinner={this.setWinner} finishMove={this.finishMove}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}